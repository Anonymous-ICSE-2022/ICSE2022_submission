[{
    "_id": {
      "$oid": "6050211231192234ea4b78a8"
    },
    "userId": "605020755724d3d855637c62",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "Poor quality inline documentation": true,
          "High quality inline documentation": true,
          "No inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 1,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "naming",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Always for every function",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Very Few",
          "Few",
          "Several"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "naming": true,
      "inline_documentation": true
    },
    "submittedAt": 1615864082868
  },{
    "_id": {
      "$oid": "606b430331192234ea4e957d"
    },
    "userId": "606b41d25724d3d855637c68",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "prefer not to disclose",
      "professionalExperience": 3,
      "academicExperience": 4,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "My answer above is conditional. The tool needs to be able to generate context-specific comments, ideally list all the 'gotchas' of the method. This is probably far beyond what tools can do today but if it is possible to make tools that good then why not.",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [
        "Code Quality",
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines",
        "Team Priorities"
      ]
    },
    "generalThoughts": "When it comes to documentation, I find myself asking if the given code is self explanatory and explicit enough to forego documentation. This is mostly not the case, as even the most seemingly simple methods, like the one shown on the right, can have tricky/non-obvious parts that can cause problems for team members, especially new-comers. In practice, this really depends on project goals, documentation standards and deadlines.",
    "metricEvaluationResponse": {
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "size": true
    },
    "submittedAt": 1617642243595
  },{
    "_id": {
      "$oid": "606b439131192234ea4e95ab"
    },
    "userId": "606b43135724d3d855637c69",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "No inline documentation": true,
          "Poor quality inline documentation": true
        },
        "additionalFeedback": "If you have enough inline comments then maybe you won't need a summary comment."
      }
    },
    "demographicResponse": {
      "occupation": "Undergraduate Student",
      "gender": "female",
      "professionalExperience": 0,
      "academicExperience": 3,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "inline_documentation",
        "size",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Code Quality"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "I like to comment where I can, it helps me revisit code and understand it faster.",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "High",
          "Average"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "inline_documentation": true
    },
    "submittedAt": 1617642385783
  },
  {
    "_id": {
      "$oid": "6021bab631192234ea43f802"
    },
    "userId": "6021b9bf5724d3d855637bbf",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 10,
      "academicExperience": 0,
      "programmingExperience": {
        "primaryLanguage": "C++",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "Complexity and number of parameters",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "Will use it only to generate the template comment",
      "relativeImportance": [],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When the method is exposed in public API or when it is complex with multiple parameters",
    "metricEvaluationResponse": {},
    "relevantMetrics": {},
    "submittedAt": 1612823222200
  },{
    "_id": {
      "$oid": "6022074131192234ea440960"
    },
    "userId": "602201d95724d3d855637bc2",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "prefer not to disclose",
      "professionalExperience": 8,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "If my team is confused during a code review for a method, I will try to rewrite the code/rename some identifiers AND write a short comment explaining the method.",
      "wouldUse": "No",
      "elaborate": "I do not trust auto summarization to create high-calibre comments required for code summaries for the code that really requires summaries. The summaries MUST be better than, for example, /** Gets all resources */ public void getAllResources() { icbm.setTarget(GPS.getCurrentLatLong()).launch(); }\n\nAn anti-pattern I see in codebases is unmodified comments that are auto-generated by the IDE. Auto-generated comments with no content are less helpful than no comments!\n",
      "situations": "An common gripe about commenting code  is that it falls out of sync with the code. So if auto-summaries are VERY smart, then I'd use an auto-summary tool.\n\nFor example, if a summary tool CAN in fact summarize the method as /** Send a nuke to current location */ public void getAllResources() { icbm.setTarget(GPS.getCurrentLatLong()).launch(); }\n\nThen by all means, auto-summarize for me!",
      "relativeImportance": [
        "coupling",
        "size",
        "complexity",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Error Proneness"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "I'm not really sure. Lately, I've been trying to write smaller methods with very descriptive names and expressive typing (in TypeScript and the latest static-typing extensions to Python). In these cases, I'm writing fewer and fewer method summary comments. However, I ALWAYS document methods for public-facing APIs, no matter how small (at least I try to ;]).",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          3,
          7,
          100
        ],
        "selectedCategories": [
          "Average",
          "High"
        ]
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          4,
          10,
          100
        ],
        "selectedCategories": [
          "Large"
        ]
      },
      "naming": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "naming": true,
      "size": true,
      "maintainability": false,
      "coupling": true
    },
    "submittedAt": 1612842821583
  },{
    "_id": {
      "$oid": "6022421931192234ea441696"
    },
    "userId": "60223ff75724d3d855637bc7",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 15,
      "academicExperience": 5,
      "programmingExperience": {
        "primaryLanguage": "C++",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "I may comment more method that are the exposed method for other people to use and less the one that are more for internal use.",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "The problem with comment is that they need to be maintained and takes time. I try to write clean and readable code so comment are not necessary",
      "situations": "",
      "relativeImportance": [
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "I rarely do a summary comment, I try to choose a good name for the method and the parameters that describes what it's doing.",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          3,
          7,
          20
        ],
        "selectedCategories": [
          "Few"
        ],
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "naming": true,
      "coupling": false
    },
    "submittedAt": 1612857885469
  },{
    "_id": {
      "$oid": "60229a8b31192234ea4429c4"
    },
    "userId": "6022903d5724d3d855637bca",
    "conceptEvaluationResponse": {
      "cohesion": {
        "situations": {
          "High cohesion": true
        },
        "additionalFeedback": ""
      },
      "inline_documentation": {
        "situations": {
          "High quality inline documentation": true
        },
        "additionalFeedback": ""
      },
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "female",
      "professionalExperience": 13,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "There's a lot in those Aspects that should just not exist and do not require comments, only code review :\n- bad naming\n- Size of method ( should be split right away before mergint into the project)\n\nCohesion and coupling show an issue in Code Design. it should be documented and tacle as fast as possible",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "coupling",
        "size",
        "cohesion",
        "naming",
        "inline_documentation",
        "maintainability"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "A comment should be used when the line of code is not clear to anyone in the team.\n\nAlways have a block code so we can generate documentation with javadoc.\nDocumentation are like test : You have to maintain it, so it's better to be centralized",
    "metricEvaluationResponse": {
      "MIMS": {
        "adjustedThresholds": [
          0,
          44,
          79,
          100
        ],
        "agreeConceptuallyOnly": false
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          22,
          40,
          100
        ],
        "selectedCategories": [
          "Low"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Small"
        ]
      },
      "naming": {
        "agreeConceptuallyOnly": false,
        "selectedCategories": [
          "Several"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "coupling": true,
      "size": true,
      "naming": true,
      "inline_documentation": true,
      "maintainability": true,
      "cohesion": true
    },
    "submittedAt": 1612880531687
  },{
    "_id": {
      "$oid": "6022b1e131192234ea44318e"
    },
    "userId": "6022afdb5724d3d855637bcc",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "Low coupling": true,
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 16,
      "academicExperience": 4,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "coupling",
        "size",
        "maintainability",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Automatic documentation generation, e.g. javadoc"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Any method that is more than a few simple lines of code or not immediately self-explanatory, regardless of complexity.",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          3,
          8,
          20
        ],
        "selectedCategories": [
          "None"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Large",
          "Medium"
        ]
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true,
      "coupling": true,
      "maintainability": true
    },
    "submittedAt": 1612886497678
  },{
    "_id": {
      "$oid": "6022c0d731192234ea44399d"
    },
    "userId": "6022bd595724d3d855637bce",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      },
      "inline_documentation": {
        "situations": {
          "No inline documentation": true,
          "Poor quality inline documentation": true
        },
        "additionalFeedback": ""
      },
      "cohesion": {
        "situations": {
          "Low cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 15,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "My rankings on Q1 of this page (the order of importance) is largely based on the ability to modify them independently - for example, it isn't that I think the quality of identifiers is less important generally than cohesion for determining the need for summary comments, as much as I would advocate for renaming your identifiers to be higher quality rather than just adding a summary comment.  Complexity and Coupling are often the more difficult of those issues to fix, which is why I would consider adding a summary comment to help alleviate those concerns to be acceptable (rather than just fixing them).",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "I generally use an automatic summary tool (often built in to the IDE) that will generate an outline and snippets for parameter / return type descriptions.  I've never used one that attempts to generate a summary further than that, but every little bit helps.",
      "relativeImportance": [
        "complexity",
        "coupling",
        "inline_documentation",
        "cohesion",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "A method needs a summary comment when the execution may have requirements or unintended side effects that are not evident from the method name, when it has parameters that need additional information to ensure they are passed and used correctly, or when there is significant business logic included that would be prohibitively long to use the method name to describe",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          7,
          100
        ],
        "selectedCategories": [
          "High"
        ],
        "agreeConceptuallyOnly": false
      },
      "naming": {
        "adjustedThresholds": [
          1,
          2,
          5,
          20
        ],
        "selectedCategories": [
          "Few",
          "Several"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "naming": true,
      "cohesion": true,
      "coupling": true,
      "inline_documentation": true
    },
    "submittedAt": 1612890334752
  },{
    "_id": {
      "$oid": "6022d00f31192234ea443e64"
    },
    "userId": "6022cc8d5724d3d855637bd0",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 6,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "- inability to rename the method during re-factoring due to too many side effects \n- the method is a part of a library that is being used by many external teams",
      "extrinsicElaboration": "- coding conventions of the team or the project  \n",
      "wouldUse": "Yes",
      "elaborate": "intellij for generating a skeleton",
      "situations": "whenever my team forces me :)",
      "relativeImportance": [
        "coupling",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Error Proneness",
        "Application Domain"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I only use the comments when something is highly ambiguous or not clear from the naming itself. or maybe sometimes during refactoring because I don't want to rename the method due to too much side effects. Most of the time I just rely on the name of the method instead of comment as suggested by CleanCode book. ",
    "metricEvaluationResponse": {
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": true,
        "additionalFeedback": "",
        "selectedCategories": []
      }
    },
    "relevantMetrics": {
      "naming": true,
      "coupling": true
    },
    "submittedAt": 1612894439364
  },{
    "_id": {
      "$oid": "6022e57831192234ea444517"
    },
    "userId": "6022e3345724d3d855637bd1",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 9,
      "academicExperience": 5,
      "programmingExperience": {
        "primaryLanguage": "Swift",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I feel like if a software can automatically generate summaries it is not useful to add a summary because I would keep summaries for complex piece of code or specific thing and not add them everywhere. I would not want to have a \"generic\" summary generated everywhere to not surcharge the files.",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "when there function is larger than usual, adding the summary allow to understand what it does at first sight in addition to the function name",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Small"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true
    },
    "submittedAt": 1612899718846
  },{
    "_id": {
      "$oid": "6024046631192234ea449365"
    },
    "userId": "602402845724d3d855637bd5",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 3,
      "academicExperience": 8,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "I would like to manually curate the suggest summaries, but would definitely consider using them as a starting point.",
      "situations": "I would likely be willing to add them directly for methods that I *might* document if I had time, but have to move on to more implementation. So I think it would be a tool to enhance my overall documentation quality.",
      "relativeImportance": [
        "naming",
        "complexity",
        "size",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "I usually leave a summary comment if the method is particularly long, or important. More so if the name of the method is not self explanatory (which often happens if I expect to use it a lot, and don't want to have a verbose name).",
    "metricEvaluationResponse": {
      "NOS": {
        "adjustedThresholds": [
          0,
          4,
          11,
          100
        ],
        "selectedCategories": [
          "Large"
        ],
        "agreeConceptuallyOnly": true
      },
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Few"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true,
      "coupling": true
    },
    "submittedAt": 1612973158768
  },{
    "_id": {
      "$oid": "60240c9531192234ea449539"
    },
    "userId": "602402f25724d3d855637bd6",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "prefer not to disclose",
      "professionalExperience": 15,
      "academicExperience": 15,
      "programmingExperience": {
        "primaryLanguage": "Javascript",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "Whether the method/function relates to a domain-specific algorithm and method --> in this case summary comment should definitely be created and potentially refer to source/published resources.",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "For me, the comments are a way to understand the programmer's intention (beyond what can be inferred from reading the code itself) - don't think this can be automated.",
      "situations": "",
      "relativeImportance": [
        "size",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I *try* to add summary comments whenever I write a function but especially in the initial iteration phase this doesn't always happen. My pattern to force this is to do it whenever I create a commit. I make sure to add comments to any new/updated function.",
    "metricEvaluationResponse": {
      "NOS": {
        "adjustedThresholds": [
          0,
          3,
          12,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          1,
          10,
          100
        ],
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true
    },
    "submittedAt": 1612975259872
  },{
    "_id": {
      "$oid": "6024228e31192234ea449a61"
    },
    "userId": "60241d415724d3d855637bdb",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "additionalFeedback": "I think it is independent of the inline summary. As I learned in university, the summary comment is used to describe what the method abstractly does and is not concerned with implementation details. For implementation comments I would use inline comments. Of course, if e.g. a method does breath search I would state that, but I would not explain how it works."
      }
    },
    "demographicResponse": {
      "occupation": "Undergraduate Student",
      "gender": "male",
      "professionalExperience": 1,
      "academicExperience": 3,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "I think those aspects in Q1 are all irrelevant for that decision. It is only dependent on the purpose the method has in respect to the whole application.",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "if it works good, however I do not feel that it is possible.",
      "situations": "if it is good, any time actually",
      "relativeImportance": [
        "naming",
        "complexity",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines",
        "Team Priorities"
      ]
    },
    "generalThoughts": "When the method is public. E.g. an interface method. If it is only called inside a class, i would not comment it. In addition, if I code something \"quick and dirty\" for my own purpose only I seldomly comment.",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          7,
          100
        ],
        "selectedCategories": [],
        "agreeConceptuallyOnly": true
      },
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": true,
        "additionalFeedback": "",
        "selectedCategories": []
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "naming": true,
      "inline_documentation": true
    },
    "submittedAt": 1612980878960
  },{
    "_id": {
      "$oid": "6024263531192234ea449b50"
    },
    "userId": "6024244c5724d3d855637bdc",
    "conceptEvaluationResponse": {
      "cohesion": {
        "situations": {
          "High cohesion": true
        },
        "additionalFeedback": ""
      },
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "prefer not to disclose",
      "professionalExperience": 7,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "size",
        "complexity",
        "cohesion",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Usually always for public methods and non-trivial (more than the typical one-liners) helper methods.",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          6,
          12,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "cohesion": true,
      "coupling": true
    },
    "submittedAt": 1612981925548
  },{
    "_id": {
      "$oid": "602436ff31192234ea449efa"
    },
    "userId": "602435af5724d3d855637be6",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 25,
      "academicExperience": 10,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "size",
        "coupling",
        "maintainability"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "All methods with 2+ lines of code required summary comments. I don't add a summary to a method only when the method implements low complexity logic.",
    "metricEvaluationResponse": {
      "MIMS": {
        "agreeConceptuallyOnly": true
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          3,
          15,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "coupling": true,
      "maintainability": true
    },
    "submittedAt": 1612986119795
  },{
    "_id": {
      "$oid": "602476ad31192234ea44ac80"
    },
    "userId": "60245fad5724d3d855637be9",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      },
      "inline_documentation": {
        "situations": {
          "No inline documentation": true,
          "Poor quality inline documentation": true
        },
        "additionalFeedback": ""
      },
      "cohesion": {
        "situations": {
          "Low cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "",
      "gender": "male",
      "professionalExperience": 12,
      "academicExperience": 1,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "To generate good / non trivial summary, i feel like the generator would need some manual guidance in the form of metadata provided by the programmer. Might as well write a summary in these cases. ",
      "situations": "To generate some API doc in a format that is easy to publish (HTML, pdf...), maybe",
      "relativeImportance": [
        "inline_documentation",
        "coupling",
        "cohesion",
        "maintainability"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "When the arguments or the return value of the method is not obvious, or when they have special values. An example would be a method that returns a negative value as an error code or something like that (array.find() in javascript):  \n<code>\n// Return the index of the key, if found or -1 if not found\npublic int Array::indexOf( const char* key); \n</code>\nAlso when the method name is not self-explanatory or misleading, although i would avoid this situation in the first place if i could... ",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          3,
          9,
          20
        ],
        "agreeConceptuallyOnly": false,
        "selectedCategories": []
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average"
        ]
      }
    },
    "relevantMetrics": {
      "naming": false,
      "inline_documentation": true,
      "coupling": true,
      "complexity": false,
      "cohesion": true,
      "maintainability": true
    },
    "submittedAt": 1613002413933
  },{
    "_id": {
      "$oid": "6025296d31192234ea44d222"
    },
    "userId": "60250b4b5724d3d855637bed",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "Poor quality inline documentation": true,
          "No inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "prefer not to disclose",
      "professionalExperience": 5,
      "academicExperience": 3,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "If it's common to execute a linter who generates a warning for each undocumented public method, it can be annoying to not follow this guideline just for the sake of saving a bit time of typing. :) ",
      "wouldUse": "Yes",
      "elaborate": "If the tool could help me to apply a useful pattern for the summaries, why not? ",
      "situations": "Either during refactoring or when I want to clean up a codebase without many summaries. I probably wouldn't use it when just writing the method - except it's quite fast. ",
      "relativeImportance": [
        "size",
        "complexity",
        "inline_documentation",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": [
        "Team Priorities",
        "Linter",
        "Coding Guidelines"
      ]
    },
    "generalThoughts": "If my linter forces me too or if my method is not just a short helper (few lines) or requires kind of many parameters.",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          2,
          8,
          20
        ],
        "agreeConceptuallyOnly": true,
        "selectedCategories": [
          "Very Few"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "maintainability": false,
      "inline_documentation": true,
      "cohesion": false,
      "complexity": true,
      "naming": true
    },
    "submittedAt": 1613048179942
  },{
    "_id": {
      "$oid": "602622c231192234ea45079f"
    },
    "userId": "602621405724d3d855637bf1",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 21,
      "academicExperience": 3,
      "programmingExperience": {
        "primaryLanguage": "C#",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "Tools provide little value, just rehashing things that are obviously present in the code, for a comment to have value, it needs to describe something that isn't obvious.",
      "situations": "",
      "relativeImportance": [
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "If it's method is part of a public api, it probably needs a summary, otherwise it probably shouldn't.",
    "metricEvaluationResponse": {
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Very Few"
        ]
      }
    },
    "relevantMetrics": {
      "naming": true
    },
    "submittedAt": 1613112007953
  },{
    "_id": {
      "$oid": "6026234b31192234ea4507cd"
    },
    "userId": "6026213d5724d3d855637bf0",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 7,
      "academicExperience": 0,
      "programmingExperience": {
        "primaryLanguage": "Python",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "I have tried some documentation generating code before and it generally has enough drawbacks to be less efficient than manually writing",
      "situations": "",
      "relativeImportance": [
        "size",
        "complexity",
        "maintainability",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [
        "Adherence to Coding Style Standards",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines",
        "Team Priorities"
      ]
    },
    "generalThoughts": "My python linter requires at least one top level comment for every function. Sometimes they are redundant or simple (as expected) and I try to improve as the code base is seen by more contributors",
    "metricEvaluationResponse": {
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "maintainability": true,
      "coupling": true
    },
    "submittedAt": 1613112139253
  },{
    "_id": {
      "$oid": "6026240c31192234ea450866"
    },
    "userId": "6026221b5724d3d855637bf4",
    "conceptEvaluationResponse": {
      "cohesion": {
        "situations": {
          "Low cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "prefer not to disclose",
      "professionalExperience": 43,
      "academicExperience": 3,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "Methods that must never be changed because somewhere something depends on it remaining that way.",
      "wouldUse": "Yes",
      "elaborate": "</inheritdoc >",
      "situations": "Implementing an interface.\nGenerating code from a spec (e.g. Swagger / OpenAPI)",
      "relativeImportance": [
        "naming",
        "cohesion",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Always. But it deserves a useful comment when it does more than one thing or has any side effects. If the name and parameters of the method do not explain what it does then the comment should.",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low"
        ]
      },
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "None"
        ]
      }
    },
    "relevantMetrics": {
      "naming": true,
      "complexity": true,
      "cohesion": true
    },
    "submittedAt": 1613112342139
  },{
    "_id": {
      "$oid": "6026256031192234ea450a59"
    },
    "userId": "6026239d5724d3d855637bf8",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "non-binary",
      "professionalExperience": 15,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "naming",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When its behavior, parameters, returns, and usage are not fully and clearly described by the name of the method.",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          1,
          3,
          20
        ],
        "selectedCategories": [
          "Very Few",
          "Few",
          "Several"
        ]
      }
    },
    "relevantMetrics": {
      "naming": true,
      "coupling": true
    },
    "submittedAt": 1613112672817
  },{
    "_id": {
      "$oid": "6026294931192234ea450c60"
    },
    "userId": "602627ad5724d3d855637bfb",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "High quality inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 30,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "always",
      "relativeImportance": [
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Always add a brief comment on all methods.  At a minimum, describe the purpose of the method, the arguments and return.",
    "metricEvaluationResponse": {},
    "relevantMetrics": {
      "inline_documentation": true
    },
    "submittedAt": 1613113673509
  },{
    "_id": {
      "$oid": "602640f431192234ea4512ac"
    },
    "userId": "60263dd55724d3d855637c04",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": "My comment regards indeed Quality of Ids: metrics should be relative to the size of the method signature (having 3 warnings in a method with no parameters would be as bad as or even worse than e.g. 6 warnings in a method with 5 params)."
      },
      "cohesion": {
        "situations": {
          "Low cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 4,
      "academicExperience": 8,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "Requirements stability",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "naming",
        "cohesion",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Adherence to Coding Style Standards",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Whenever the method exposes a public interface, as the comment becomes part of the API documentation (Javadoc). (Even if I'd later contradict myself...)",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ],
        "adjustedThresholds": [
          0,
          2,
          10,
          100
        ]
      },
      "naming": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "naming": true,
      "coupling": true,
      "cohesion": true
    },
    "submittedAt": 1613119825047
  },{
    "_id": {
      "$oid": "60269a4531192234ea452664"
    },
    "userId": "602695d95724d3d855637c0a",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "additionalFeedback": "I don't think inline documentation is a factor to whether a method should have a summary. They may complement each other or not be necessary at all depending on the code quality."
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 17,
      "academicExperience": 7,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "Not sure, I'm afraid there would be additional effort to make them good.",
      "relativeImportance": [
        "complexity",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Error Proneness",
        "Adherence to Coding Style Standards"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "If the method is a part of a public API, if arguments relies on special requirements, if exceptions can be thrown and callers should be aware of them to deal with errors, if the method deserves special documentation to make some behavior explicit.",
    "metricEvaluationResponse": {
      "McCC": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "inline_documentation": true
    },
    "submittedAt": 1613142610067
  },{
    "_id": {
      "$oid": "6026a54131192234ea452a41"
    },
    "userId": "6026a27d5724d3d855637c0c",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 6,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "That would help saving my time to write the summary. If the generated summary is good enough, then I can just tweak it a bit to fit my needs.",
      "situations": "- After I finish writing new code in my IDE.\n- After I refactor the code.",
      "relativeImportance": [
        "complexity",
        "maintainability"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Code Quality"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "I usually add a summary comment that the code is complicated enough so that I think I may forget what it does when I come back to read it again.",
    "metricEvaluationResponse": {
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "Low"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "maintainability": true
    },
    "submittedAt": 1613145433282
  },{
    "_id": {
      "$oid": "602a88a831192234ea464cc7"
    },
    "userId": "602a83af5724d3d855637c10",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 9,
      "academicExperience": 3,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "Triviality, i.e., if the method is succinctly described by other documentation and its name",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "Given a sufficient quality of the tool's outputs. I would, however, manually verify, that the output is correct.",
      "situations": "In any situation where the tool would work correctly.",
      "relativeImportance": [
        "size"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Almost always. Exceptions may be methods that are \"boilerplate\", e.g. a Java getter or setter that does not have any semantics besides field access (e.g., returns unmodifiable, requires non-null) if the field itself is documented and the documentation would amount to \"writes #field\". Generally, summaries should ensure that a consumer of my code does not need to read my source code. I also document private methods.",
    "metricEvaluationResponse": {
      "MIMS": {
        "adjustedThresholds": [
          0,
          50,
          65,
          100
        ],
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          3,
          6,
          100
        ],
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "naming": {
        "adjustedThresholds": [
          1,
          2,
          4,
          20
        ],
        "selectedCategories": [
          "None",
          "Very Few",
          "Few",
          "Several"
        ]
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          2,
          15,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "maintainability": false,
      "complexity": false,
      "size": true,
      "cohesion": false,
      "coupling": false,
      "inline_documentation": false,
      "naming": false
    },
    "submittedAt": 1613400232258
  },{
    "_id": {
      "$oid": "602d5e5d31192234ea46fbe3"
    },
    "userId": "602d5c945724d3d855637c12",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "Low coupling": true,
          "High coupling": true
        },
        "additionalFeedback": "Source code generally needs comments. When there is interdependence between components, that only increases the need for comments, not the other way around."
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 3,
      "academicExperience": 4,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "I would argue that maintainability and coupling are similar topics (coupled code is harder to maintain / make changes to).",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "It's unclear that such a tool would be able to adequately capture intricacies in a non-trivial codebase.",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "maintainability",
        "coupling",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "All methods need comments -- a user shouldn't need to read a function to know what it does. Having comments make it easy in an IDE to look at the comments when considering different completions.",
    "metricEvaluationResponse": {
      "MIMS": {
        "adjustedThresholds": [
          0,
          28,
          47,
          100
        ],
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Small",
          "Medium",
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "maintainability": true,
      "complexity": true,
      "coupling": true,
      "naming": false,
      "size": true
    },
    "submittedAt": 1613586024318
  },{
    "_id": {
      "$oid": "602d63d731192234ea46fd9a"
    },
    "userId": "602d61e55724d3d855637c13",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 1,
      "academicExperience": 11,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "I've noticed that in certain application domains, such as scientific computing, it is much more likely that I'll use summary comments, just to explain the mathemtical computation being carried out by the method.",
      "extrinsicElaboration": "Project deadlines definitely have an impact; if a project has strict time constraints you won't have the luxury of taking the time to comment everything.",
      "wouldUse": "No",
      "elaborate": "So far, the tools that are available in IDEs only generate comments for simplistic cases, where summary comments are really not needed. I also think that the times where I would want a summary comment, I would prefer to write the comment on my own to make sure that I'm conveying all that's important. However, if a tool could do this, at a quality that's as good as comments I write myself, then I would use it, although I'm skeptical if this is possible.",
      "situations": "refer to my previous answer",
      "relativeImportance": [
        "maintainability",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "Typically, I try to have summary comments for methods where their name doesn't convey enough about what the method does. However, when I work on a library that is going to be consumed by other developers, I try to comment every method in the API, that can then be used to automatically generate documentation. I'll say that not all summary comments are created equal; some contain important information about the method's behavior that can't solely be conveyed through the method name (such as edge cases, exception behavior etc.)",
    "metricEvaluationResponse": {
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "maintainability": true,
      "coupling": false
    },
    "submittedAt": 1613587415313
  },{
    "_id": {
      "$oid": "602d753931192234ea470249"
    },
    "userId": "602d74a45724d3d855637c15",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "Poor quality inline documentation": true,
          "High quality inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 5,
      "academicExperience": 0,
      "programmingExperience": {
        "primaryLanguage": "Javascript",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "maintainability",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Method comments are the easiest way to get good \\\"intellisense\\\" in JavaScript, so my rule of thumb is always including them for all methods on a class, and any function that is used outside the file it's defined in",
    "metricEvaluationResponse": {
      "MIMS": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "inline_documentation": true,
      "maintainability": true
    },
    "submittedAt": 1613591865855
  },{
    "_id": {
      "$oid": "602d767431192234ea47029d"
    },
    "userId": "602d756a5724d3d855637c16",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 8,
      "academicExperience": 17,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "I sometimes use automatically generated summaries from IDEs. Most often it is trivial, but if a tool can generate more complex types of summaries, I would use it.",
      "situations": "",
      "relativeImportance": [
        "maintainability",
        "complexity",
        "size",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Code Quality",
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Summary comments are good for automatically generating documentation (javadoc).",
    "metricEvaluationResponse": {
      "MIMS": {
        "adjustedThresholds": [
          0,
          15,
          33,
          100
        ],
        "selectedCategories": [
          "High"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Small",
          "Medium",
          "Large"
        ]
      },
      "McCC": {
        "agreeConceptuallyOnly": true
      },
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": true,
        "additionalFeedback": "",
        "selectedCategories": []
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "size": true,
      "maintainability": true,
      "naming": true
    },
    "submittedAt": 1613592180727
  },{
    "_id": {
      "$oid": "602d77b031192234ea47030a"
    },
    "userId": "602d76e45724d3d855637c17",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 5,
      "academicExperience": 3,
      "programmingExperience": {
        "primaryLanguage": "Python",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I've used IDE features to automatically fill a summary comment, but they require me to fill in the details (descriptions of the method, its arguments etc.). It is usually not worth it, especially for python where there are several different documentation styles.",
      "situations": "If the tool generates a human like summary without requiring me to fill it in, sure.",
      "relativeImportance": [
        "size"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Unless a method is a one off, or its obvious what it does (from its name), every method should have a summary comment, especially in a collaborative environment",
    "metricEvaluationResponse": {
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large",
          "Small"
        ]
      }
    },
    "relevantMetrics": {
      "size": true
    },
    "submittedAt": 1613592496680
  },{
    "_id": {
      "$oid": "602d783131192234ea47032f"
    },
    "userId": "602d77be5724d3d855637c18",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "Poor quality inline documentation": true,
          "No inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 4,
      "academicExperience": 7,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "Poor quality code that is prone to errors seems like an obvious candidate for when you would want summary comments. The comments would perhaps help in being cognizant of the tricky parts of the method.",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Application Domain",
        "Code Quality",
        "Error Proneness"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I think every method should have a summary comment, except when it's overriding a parent class' method which already has a summary comment, or if it's implementing an interface's method who has it's own summary comment.",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "inline_documentation": true,
      "complexity": true
    },
    "submittedAt": 1613592625394
  },{
    "_id": {
      "$oid": "602d78e031192234ea470381"
    },
    "userId": "602d788c5724d3d855637c19",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 2,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "What is the difference between complexity and maintainability? From the descriptions it seems like the two are quite interrelated.",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "maintainability",
        "complexity",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "If the method is either complex or not really well-named or mixing technologies (for example on Android, a java/kotlin method calling C++)",
    "metricEvaluationResponse": {
      "naming": {
        "agreeConceptuallyOnly": true
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low"
        ]
      },
      "McCC": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "naming": true,
      "maintainability": true
    },
    "submittedAt": 1613592800175
  },{
    "_id": {
      "$oid": "602d7a1931192234ea4703d8"
    },
    "userId": "602d79085724d3d855637c1a",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true,
          "Low coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "",
      "gender": "male",
      "professionalExperience": 4,
      "academicExperience": 1,
      "programmingExperience": {
        "primaryLanguage": "Javascript",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "maintainability",
        "complexity",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I'm not really sure, I try to document most methods I work on, and I think it is important when working in a team/open source. In a lot of cases, a good method name will tell you what the purpose of the method is, but a comment can provide more information about its behavior under specific conditions.",
    "metricEvaluationResponse": {
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "High",
          "Average"
        ]
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low"
        ],
        "adjustedThresholds": [
          0,
          32,
          40,
          100
        ]
      }
    },
    "relevantMetrics": {
      "size": false,
      "maintainability": true,
      "coupling": true,
      "complexity": true
    },
    "submittedAt": 1613593113621
  },{
    "_id": {
      "$oid": "602d7b9931192234ea470450"
    },
    "userId": "602d7a9c5724d3d855637c1c",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 9,
      "academicExperience": 4,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "In my opinion, whether a method needs to be documented or not depends more on context than anything else. If it's a part of a public api, comments are mandatory; it does not matter how complex, maintainable, small or large a method is in this case, from the api consumer's perspective, its good to have comments for public apis.",
      "extrinsicElaboration": "While project deadlines are a factor in the short term, I would eventually add comments when I get time.",
      "wouldUse": "No",
      "elaborate": "I'm generally skeptical of automatic comments, as they tend to be generic and not useful.",
      "situations": "",
      "relativeImportance": [],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "Most methods need some kind of documentation, but I tend to omit comments from trivial/obvious methods.",
    "metricEvaluationResponse": {},
    "relevantMetrics": {
      "complexity": false,
      "maintainability": false,
      "coupling": false,
      "naming": false
    },
    "submittedAt": 1613593497085
  },{
    "_id": {
      "$oid": "602d7c2931192234ea47047e"
    },
    "userId": "602d7bd05724d3d855637c1d",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 10,
      "academicExperience": 0,
      "programmingExperience": {
        "primaryLanguage": "Javascript",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "If a tool can do that and save me time, why not. But the quality of the tool would be a big factor.",
      "situations": "",
      "relativeImportance": [
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Adherence to Coding Style Standards"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I use a Summary Comment when the WHY is not clear. If I have to explain the WHAT is generally a kind of red flag that my method is not enough good. ",
    "metricEvaluationResponse": {
      "naming": {
        "agreeConceptuallyOnly": true,
        "selectedCategories": []
      }
    },
    "relevantMetrics": {
      "naming": true
    },
    "submittedAt": 1613593641564
  },{
    "_id": {
      "$oid": "602d7cd131192234ea4704cc"
    },
    "userId": "602d7c7d5724d3d855637c1f",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 2,
      "academicExperience": 12,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I have found tools that do this to generate generic comments which just add noise to the codebase.",
      "situations": "",
      "relativeImportance": [
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When I write code someone else is gonna use/maintain",
    "metricEvaluationResponse": {
      "McCC": {
        "agreeConceptuallyOnly": true,
        "adjustedThresholds": [
          0,
          6,
          33,
          100
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "size": false
    },
    "submittedAt": 1613593809645
  },{
    "_id": {
      "$oid": "602d816331192234ea47060d"
    },
    "userId": "602d803b5724d3d855637c21",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "No inline documentation": true,
          "Poor quality inline documentation": true
        },
        "additionalFeedback": "If there are enough inline comments, then there would be no need for summary comments"
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "female",
      "professionalExperience": 2,
      "academicExperience": 5,
      "programmingExperience": {
        "primaryLanguage": "Python",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "It really depends on the tool. Can it generate detailed comments, like descriptions for parameters? That would be useful, and I would use it for that.",
      "relativeImportance": [
        "maintainability",
        "complexity",
        "naming",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "I try to comment most methods (and code in general) I write at my workplace. It helps both my teammates as well as myself when I revisit the code after a break. But whether or not something needs a summary comment, I think that's very context specific.",
    "metricEvaluationResponse": {
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Few",
          "Several"
        ]
      },
      "McCC": {
        "agreeConceptuallyOnly": false,
        "selectedCategories": [
          "Average",
          "High"
        ],
        "adjustedThresholds": [
          0,
          5,
          10,
          100
        ]
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "Low"
        ]
      }
    },
    "relevantMetrics": {
      "maintainability": true,
      "complexity": true,
      "naming": true,
      "inline_documentation": true
    },
    "submittedAt": 1613594979867
  },{
    "_id": {
      "$oid": "602d825a31192234ea47066c"
    },
    "userId": "602d81ac5724d3d855637c22",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "prefer not to disclose",
      "professionalExperience": 6,
      "academicExperience": 4,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "It is very dependent on the situation, and the options above like coding standards and whether the method is part of a public api are more important than things like size, complexity etc.",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I haven't seen any tools that can generate good quality comments.",
      "situations": "",
      "relativeImportance": [],
      "additionalSourceCodeCharacteristics": [
        "Adherence to Coding Style Standards",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Anything non-trivial probably would benefit from a summary comment.",
    "metricEvaluationResponse": {},
    "relevantMetrics": {},
    "submittedAt": 1613595226191
  },{
    "_id": {
      "$oid": "602d834731192234ea4706a8"
    },
    "userId": "602d80245724d3d855637c20",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "prefer not to disclose",
      "professionalExperience": 10,
      "academicExperience": 15,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "Surprise: if the method does not do what one may think at first sight.",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "If the summary can be generated, then it is useless: the comment is useful to a human if it cannot be generated.",
      "situations": "When I want to obfuscate code by adding random crap to it.",
      "relativeImportance": [
        "complexity",
        "naming",
        "maintainability"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "When the signature is not explicit enough.",
    "metricEvaluationResponse": {
      "naming": {
        "agreeConceptuallyOnly": true
      },
      "McCC": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "size": false,
      "complexity": true,
      "maintainability": true,
      "naming": true
    },
    "submittedAt": 1613595463691
  },{
    "_id": {
      "$oid": "602e988531192234ea472a48"
    },
    "userId": "602e97175724d3d855637c26",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 6,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "size",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When a the content of a method is complex or when the name of the method will not be enough to describe well it purpose",
    "metricEvaluationResponse": {
      "NOS": {
        "adjustedThresholds": [
          0,
          4,
          10,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      },
      "McCC": {
        "agreeConceptuallyOnly": true
      },
      "naming": {
        "name": "naming",
        "additionalFeedback": "",
        "selectedCategories": [
          "Few",
          "Several"
        ],
        "agreeConceptuallyOnly": false
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true
    },
    "submittedAt": 1613666437739
  },{
    "_id": {
      "$oid": "602f9eec31192234ea475961"
    },
    "userId": "602f971a5724d3d855637c27",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 5,
      "academicExperience": 5,
      "programmingExperience": {
        "primaryLanguage": "C++",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "If the method is complex but has a name that is \"on spot\", it has less need to have a summary comment.",
      "extrinsicElaboration": "If a colleague does not understand something about the method while using it or performing code review, it might needs better naming, refactoring (does too much) or a good summary comment.",
      "wouldUse": "No",
      "elaborate": "Auto-generated summaries alone don't give more information, but only repeat what's already written in code. For example, repeating all the parameter names and giving them useless descriptions just because it needs one will only make the comment outdated quickly.\n\nIf a method has so many parameters that you need to describe them all, the method might be too complex and should be refactored, anyways.\n\nAuto-generated summaries that use a function name like \"PerformSomeOperation()\" and create \"Performs some operation\" from it are useless and even dangerous, because now the same thing is written there twice but no new information is made available to the reader. And it isn't picked up by search/replace/refactor tools in case the method name needs to be changed.",
      "situations": "Probably only if I'm forced to use one.",
      "relativeImportance": [
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I usually try to name my functions and methods so that what they do is obvious so I don't need a summary comment. However, if the function/method belongs to the public interface I tend to more often put a comment. Depending on the complexity, I give brief examples on the intended usage or the error cases.\n\nI try to stay as general as possible so the comments don't grow old and outdated so quickly.",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          9,
          100
        ],
        "agreeConceptuallyOnly": false
      }
    },
    "relevantMetrics": {
      "complexity": false,
      "naming": true
    },
    "submittedAt": 1613733612470
  },{
    "_id": {
      "$oid": "6046ed3b31192234ea49f551"
    },
    "userId": "6046eab45724d3d855637c31",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      },
      "cohesion": {
        "situations": {
          "High cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 9,
      "academicExperience": 5,
      "programmingExperience": {
        "primaryLanguage": "C++",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "If the tool can generate a mostly correct summary. ",
      "relativeImportance": [
        "complexity",
        "size",
        "cohesion",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [
        "Code Quality"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "I usually don't add a summary comment in my code base, since I believe the good code should explain itself. However, if I would like to present the code to someone else, I may add a summary code. ",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          8,
          100
        ],
        "selectedCategories": [
          "High"
        ],
        "agreeConceptuallyOnly": false
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          4,
          29,
          100
        ],
        "selectedCategories": [
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "size": true,
      "cohesion": true,
      "coupling": true
    },
    "submittedAt": 1615260987387
  },{
    "_id": {
      "$oid": "6046f24531192234ea49f604"
    },
    "userId": "6046eb1a5724d3d855637c32",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "No inline documentation": true,
          "Poor quality inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 8,
      "academicExperience": 31,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "Dependencies: Number of methods invoked",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "The technology is not mature",
      "situations": "Can provide hints.",
      "relativeImportance": [
        "complexity",
        "size",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Code Quality"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When it has complex functionality",
    "metricEvaluationResponse": {
      "NOS": {
        "adjustedThresholds": [
          0,
          16,
          51,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ],
        "agreeConceptuallyOnly": false
      },
      "McCC": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "inline_documentation": true
    },
    "submittedAt": 1615262277441
  },{
    "_id": {
      "$oid": "6046f53031192234ea49f65c"
    },
    "userId": "6046ea675724d3d855637c30",
    "conceptEvaluationResponse": {
      "cohesion": {
        "situations": {
          "High cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 0,
      "academicExperience": 7,
      "programmingExperience": {
        "primaryLanguage": "Python",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "Concurrency (shared variables, events, locks, atomic blocks), blocking/non-blocking function or system calls, real time requirements",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "Generating templates with correct markdown/docstring format for writing summary can save quite some time.",
      "situations": "If it can really save work and time to write documentation.",
      "relativeImportance": [
        "size",
        "complexity",
        "maintainability",
        "cohesion"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "The method is a public method, and the method names with its typing information are not self-explanatory or can be interpreted differently, and it requires explanation and disambiguation. For example, the method is blocking or non-blocking, the method is implementing a specific variant of well-known algorithms such as a particular quicksort, etc.",
    "metricEvaluationResponse": {
      "McCC": {
        "agreeConceptuallyOnly": false,
        "adjustedThresholds": [
          0,
          3,
          9,
          100
        ],
        "selectedCategories": [
          "High"
        ]
      },
      "NOS": {
        "agreeConceptuallyOnly": false,
        "adjustedThresholds": [
          0,
          6,
          14,
          100
        ],
        "selectedCategories": [
          "Large"
        ]
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average"
        ],
        "adjustedThresholds": [
          0,
          34,
          47,
          100
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "maintainability": true,
      "cohesion": true
    },
    "submittedAt": 1615263024526
  },{
    "_id": {
      "$oid": "6046fffe31192234ea49f7a4"
    },
    "userId": "6046ffb95724d3d855637c35",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 12,
      "academicExperience": 14,
      "programmingExperience": {
        "primaryLanguage": "C++",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I would always add one.",
    "metricEvaluationResponse": {},
    "relevantMetrics": {},
    "submittedAt": 1615265790085
  },{
    "_id": {
      "$oid": "604707e431192234ea49f89a"
    },
    "userId": "604705b55724d3d855637c36",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Undergraduate Student",
      "gender": "male",
      "professionalExperience": 2,
      "academicExperience": 4,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "How often a method or code path is used.",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "Automatically generated summaries don't give any more useful information than that of an intelligent code editor.",
      "situations": "If the auto generated summaries could capture assertions about the parameters. For example, if a number parameter must be positive, then it should be in documentation. If this could be auto-generated that would be helpful.",
      "relativeImportance": [
        "naming",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API",
        "Application Domain"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "I always provide a summary comment for the top-most level of a block.\nThat could be at the top of a function, an interface, or a class.\n\nFor deeper blocks, I look at if the inputs and outputs make my code self explanatory. If not, then I provide an explanation of what it is doing (for example, perhaps something complicated in a for loop manipulating the index in a strange way).",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          1,
          4,
          20
        ],
        "selectedCategories": [
          "Few"
        ],
        "agreeConceptuallyOnly": true
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          20,
          100
        ],
        "selectedCategories": [
          "High"
        ],
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "naming": true,
      "complexity": true,
      "coupling": false
    },
    "submittedAt": 1615267812299
  },{
    "_id": {
      "$oid": "60470da631192234ea49f97f"
    },
    "userId": "60470a905724d3d855637c3a",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 4,
      "academicExperience": 10,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "- Under time pressure\n- If the tool is reliable",
      "relativeImportance": [
        "size",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Code Quality",
        "Whether the method is part of a public facing API",
        "Adherence to Coding Style Standards"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "- When the method is large\n- When the code is hard-to-read\n",
    "metricEvaluationResponse": {
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large"
        ],
        "adjustedThresholds": [
          0,
          5,
          15,
          100
        ]
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          3,
          10,
          100
        ],
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true
    },
    "submittedAt": 1615269286467
  },{
    "_id": {
      "$oid": "60470dc031192234ea49f985"
    },
    "userId": "60470a745724d3d855637c39",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "No inline documentation": true,
          "Poor quality inline documentation": true,
          "High quality inline documentation": true
        },
        "additionalFeedback": "I see summary vs inline comments as serving different purposes.\n\nSummary comments - what the method does\nInline comments - how the method does it"
      },
      "cohesion": {
        "situations": {
          "Low cohesion": true,
          "High cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 1,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "I'd be skeptical that such a tool could generate summaries that would be meaningful to a human in the situations where they'd be most necessary (e.g intricate stateful update), but would certainly use such a tool if it existed.",
      "situations": "As in my answer above, such a tool would be most useful when documenting a complex behaviour which a human might inadvertently describe incompletely when attempting to summarise.",
      "relativeImportance": [
        "complexity",
        "size",
        "cohesion",
        "maintainability",
        "inline_documentation",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Code Quality",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "when there are surprising side effects or error conditions, or where the behaviour of the method is not intelligible purely from its name/type ",
    "metricEvaluationResponse": {
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": true,
        "additionalFeedback": "",
        "selectedCategories": [
          "Very Few",
          "Few",
          "Several"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      },
      "McCC": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "cohesion": true,
      "size": true,
      "complexity": true,
      "naming": true,
      "maintainability": true,
      "inline_documentation": true
    },
    "submittedAt": 1615269312263
  },{
    "_id": {
      "$oid": "60471b8731192234ea49fb35"
    },
    "userId": "604718c35724d3d855637c3e",
    "conceptEvaluationResponse": {
      "cohesion": {
        "situations": {
          "High cohesion": true
        },
        "additionalFeedback": "maybe depending on complexity"
      },
      "inline_documentation": {
        "situations": {
          "Poor quality inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 1,
      "academicExperience": 2,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "normally write positively, sometimes I like to use doxygen for short line   s of code blcoks",
      "relativeImportance": [
        "cohesion",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "when the code block is not easy to understand or using some other functions in the current block then explain",
    "metricEvaluationResponse": {},
    "relevantMetrics": {
      "cohesion": true,
      "inline_documentation": true
    },
    "submittedAt": 1615272839368
  },{
    "_id": {
      "$oid": "6047206831192234ea49fbd3"
    },
    "userId": "60471b425724d3d855637c40",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      },
      "inline_documentation": {
        "situations": {
          "No inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 2,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "If there was a good tool, definitely.",
      "situations": "",
      "relativeImportance": [
        "coupling",
        "complexity",
        "size",
        "maintainability",
        "naming",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Only when specific assumptions are required on the input, that cannot be expressed by its type. \nFor example, \"the number must be positive\",  \"the input tensor is of size [length x batch]\", or \"the array must not be empty\".\n\nI never write comments like \"add two integers and return the result\", this is redundant in my opinion, because it can be expressed by a descriptive method name like \"add\", especially in statically typed languages like java where the signature is \"add(int, int)\", so there's no way to think that it adds anything other than two integers. ",
    "metricEvaluationResponse": {
      "NOS": {
        "adjustedThresholds": [
          0,
          4,
          8,
          100
        ],
        "agreeConceptuallyOnly": true
      },
      "naming": {
        "agreeConceptuallyOnly": true
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low"
        ]
      },
      "McCC": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true,
      "coupling": true,
      "maintainability": true,
      "inline_documentation": true
    },
    "submittedAt": 1615274088278
  },{
    "_id": {
      "$oid": "6047246731192234ea49fc5e"
    },
    "userId": "6046e94d5724d3d855637c2f",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 0,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "iff. the summaries are precise.",
      "relativeImportance": [
        "naming",
        "complexity",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [
        "Application Domain"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "If the method is too difficult to understand, especially for some complex algorithms, which have unfamiliar variable names (e.g., useless variable names, algorithm-specific variable names). ",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          2,
          7,
          20
        ],
        "agreeConceptuallyOnly": false,
        "selectedCategories": [
          "Few",
          "Several"
        ]
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          5,
          10,
          100
        ],
        "selectedCategories": [
          "Average",
          "High"
        ]
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          10,
          20,
          100
        ],
        "selectedCategories": [
          "Large",
          "Medium"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true
    },
    "submittedAt": 1615275111959
  },{
    "_id": {
      "$oid": "60472c8331192234ea49fd5b"
    },
    "userId": "604729bd5724d3d855637c42",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 8,
      "academicExperience": 4,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "Probably if a machine understands method a human can also understand it.",
      "situations": "If it would be under human supervision.",
      "relativeImportance": [
        "complexity",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "At least each public method should have a summary comment. This is useful for \"external\" method users to be able to tell what the method does, without looking at its implementation. Also, private methods should have comments when their complexity warrants it or when they are not self-documenting (this is obviously rather subjective).",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          3,
          100,
          100
        ],
        "agreeConceptuallyOnly": true
      },
      "naming": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "maintainability": false,
      "coupling": false,
      "complexity": true,
      "naming": true
    },
    "submittedAt": 1615277187047
  },{
    "_id": {
      "$oid": "6047396e31192234ea49ff01"
    },
    "userId": "604738205724d3d855637c46",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "female",
      "professionalExperience": 0,
      "academicExperience": 10,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "In principle, yes, however, I am skeptical that the quality of these summaries would be sufficient; they are most needed for non-trivial code. ",
      "situations": "",
      "relativeImportance": [
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "As soon as the method does non-trivial computation that is not evident from e.g. the method name. ",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          10,
          100
        ],
        "selectedCategories": [],
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "complexity": true
    },
    "submittedAt": 1615280494952
  },{
    "_id": {
      "$oid": "60473a0431192234ea49ff18"
    },
    "userId": "604735c25724d3d855637c43",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": "About coupling? None\n\nAbout the two previous questions, I could not understand what you are talking about: what are the sliders for? Which methods are you talking about? You are talking of compiler warnings, or something else? I was very confused by these two pages."
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 3,
      "academicExperience": 3,
      "programmingExperience": {
        "primaryLanguage": "Python",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "The non-algorithmic complexity: whether a method is hard to understand or not.",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "There is no way a tool would generate a summary on the right level of abstraction, for each possible method.\n\nSay, you have a method that performs one of the steps involved in SHA-256 encryption. You would write in a typical summary \"Perform that step of the encryption\". An automatic tool, however, wouldn't even be aware that it's about a SHA-256 encryption.",
      "situations": "None, really. Except perhaps to give automatically the functions it depends on, and what functions use it: this is generally a chore to write on a summary because you have to go through the whole program - and yet it's a very helpful information.\n\nProbably some automated complexity analyzer result could be good too, though that could lead to people over-optimizing their code when it's not necessary (because not in the critical path), at the potential cost of readability.",
      "relativeImportance": [
        "complexity",
        "naming",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "If I only work alone, I only write summary comment for complicated statements, or function whose names do not tell everything (because of a lack of words and/or i want to keep my function names fairly short)\n\nWhen I code with others, I add the green kind of summary comment for each function when what it does is not obvious (so, in the particular example displayed, i wouldn't add one) - and I add the red kind of comments for each statement that could be questioned by others, or that are hard to read as is.",
    "metricEvaluationResponse": {},
    "relevantMetrics": {
      "size": false,
      "complexity": true,
      "naming": true,
      "coupling": true
    },
    "submittedAt": 1615280644483
  },{
    "_id": {
      "$oid": "60473aa631192234ea49ff36"
    },
    "userId": "604737085724d3d855637c45",
    "conceptEvaluationResponse": {
      "cohesion": {
        "situations": {
          "High cohesion": true,
          "Low cohesion": true
        },
        "additionalFeedback": "Depends on how obviously related the functionalities are"
      },
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "prefer to self-describe",
      "professionalExperience": 9,
      "academicExperience": 6,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      },
      "genderSpecified": "masculin"
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "You mean AI for text of just @brief/@param skeletons?",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "coupling",
        "maintainability",
        "cohesion"
      ],
      "additionalSourceCodeCharacteristics": [
        "Adherence to Coding Style Standards",
        "Whether the method is part of a public facing API",
        "Error Proneness"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "It is public to other classes, or not self-explanatory from its name.",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          4,
          7,
          100
        ],
        "selectedCategories": [
          "High",
          "Average"
        ]
      },
      "MIMS": {
        "adjustedThresholds": [
          0,
          30,
          60,
          100
        ],
        "selectedCategories": [
          "Low",
          "Average"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "maintainability": true,
      "coupling": true,
      "cohesion": true
    },
    "submittedAt": 1615280806347
  },{
    "_id": {
      "$oid": "60474c8c31192234ea4a013d"
    },
    "userId": "604748b55724d3d855637c47",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 3,
      "academicExperience": 11,
      "programmingExperience": {
        "primaryLanguage": "C",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "Anticipation who else or how many different developers are going to see and work on the code",
      "wouldUse": "No",
      "elaborate": "I would not trust a tool to generate a summary, if I feel the code is not self-explanatory. And if it is, I wouldn't add a summary. I can imagine using tool support for summary templates, though. For example, there are parts that I usually add to a summary: Description of input parameters, description of return values, changes to global state, etc. Tool support may be helpful so that I forget less of that in my summaries.",
      "situations": "see above",
      "relativeImportance": [],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When I feel the function of the method cannot be described accurately just by its name (or that name would become way too long)",
    "metricEvaluationResponse": {
      "naming": {
        "agreeConceptuallyOnly": false
      }
    },
    "relevantMetrics": {
      "naming": false
    },
    "submittedAt": 1615285388656
  },{
    "_id": {
      "$oid": "60475f9b31192234ea4a0361"
    },
    "userId": "60475e7f5724d3d855637c48",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 20,
      "academicExperience": 10,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "If a tool produces the summary, it will probably be technical/superficial and not what I'd want a summary to contain.",
      "situations": "",
      "relativeImportance": [
        "size",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Before functions/methods and before logically complex code.",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "High"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true
    },
    "submittedAt": 1615290267694
  },{
    "_id": {
      "$oid": "6047646531192234ea4a03f3"
    },
    "userId": "60471aa65724d3d855637c3f",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 0,
      "academicExperience": 5,
      "programmingExperience": {
        "primaryLanguage": "C++",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "Overall strangeness or unortodoxness.",
      "extrinsicElaboration": "Is anyone besides me going to read it? Is it an open project with loosely connected contributors or is it a fixed team of people that are close?",
      "wouldUse": "No",
      "elaborate": "I would try to convey the intuitive understanding in the summary, a don't think a tool can do that.",
      "situations": "If my boss requires me to write summaries but does not read them :).",
      "relativeImportance": [
        "coupling",
        "complexity",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines"
      ]
    },
    "generalThoughts": "When it is not trivial and self-explanatary.",
    "metricEvaluationResponse": {
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": true,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large",
          "Small"
        ]
      },
      "McCC": {
        "agreeConceptuallyOnly": false,
        "selectedCategories": [
          "High",
          "Average"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "coupling": true
    },
    "submittedAt": 1615291493997
  },{
    "_id": {
      "$oid": "6047652131192234ea4a0416"
    },
    "userId": "604763ed5724d3d855637c49",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 6,
      "academicExperience": 13,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I answered No since I don't think a tool could generate effective summaries for the methods that really need them.",
      "situations": "I would only trust such a tool for the most trivial of methods. Generating natural language summaries is too error prone.",
      "relativeImportance": [
        "complexity",
        "size",
        "maintainability",
        "coupling"
      ],
      "additionalSourceCodeCharacteristics": [
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": [
        "Team Priorities"
      ]
    },
    "generalThoughts": "All public methods should have a comment. Private methods that are critical / non-trivial or contain some specially engineered cases should also have a summary comment.",
    "metricEvaluationResponse": {
      "NOS": {
        "adjustedThresholds": [
          0,
          10,
          20,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ],
        "agreeConceptuallyOnly": true
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "High",
          "Average"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "coupling": true,
      "maintainability": true
    },
    "submittedAt": 1615291681093
  },{
    "_id": {
      "$oid": "6047786331192234ea4a0645"
    },
    "userId": "604777175724d3d855637c4a",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 4,
      "academicExperience": 4,
      "programmingExperience": {
        "primaryLanguage": "Python",
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "Yes if the tool is intelligent enough. ",
      "situations": "",
      "relativeImportance": [
        "naming",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When I can not find a proper name for the method",
    "metricEvaluationResponse": {
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Very Few"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average"
        ]
      }
    },
    "relevantMetrics": {
      "naming": true,
      "complexity": true
    },
    "submittedAt": 1615296611849
  },{
    "_id": {
      "$oid": "604793bb31192234ea4a097d"
    },
    "userId": "6047918e5724d3d855637c4c",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true,
          "Low coupling": true
        },
        "additionalFeedback": "I think it's just good coding practice to include comments for each function. It's always easier to decipher than having to go line by line and re-understand what's happening with your code."
      },
      "inline_documentation": {
        "situations": {
          "No inline documentation": true,
          "Poor quality inline documentation": true
        },
        "additionalFeedback": ""
      },
      "cohesion": {
        "situations": {
          "Low cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "female",
      "professionalExperience": 0,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "In many situations. It is a hassle to have to write summary comments, even though they are useful. So a tool that would help write them for me so that I don't have to think about it would be immensely useful!",
      "relativeImportance": [
        "complexity",
        "size",
        "coupling",
        "cohesion",
        "inline_documentation",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "If when writing the code I get confused by my own logic, I break the code up by summary comments to understand what each section is actually accomplishing.",
    "metricEvaluationResponse": {
      "naming": {
        "adjustedThresholds": [
          1,
          2,
          10,
          20
        ],
        "agreeConceptuallyOnly": false,
        "selectedCategories": [
          "Few",
          "Several"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Small",
          "Medium",
          "Large"
        ],
        "adjustedThresholds": [
          0,
          6,
          19,
          100
        ]
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          3,
          11,
          100
        ],
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "coupling": true,
      "inline_documentation": true,
      "naming": true,
      "cohesion": true
    },
    "submittedAt": 1615303611116
  },{
    "_id": {
      "$oid": "6047a56931192234ea4a0ca7"
    },
    "userId": "6047a3735724d3d855637c4d",
    "conceptEvaluationResponse": {
      "inline_documentation": {
        "situations": {
          "No inline documentation": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 1,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "If the tool is effective and the summaries it generates are reasonable (can be edited in a few seconds to be a good summary)",
      "relativeImportance": [
        "complexity",
        "size",
        "inline_documentation"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "I would definitely want a summary comment if the code is more than a few lines, or if it is a single line but does something very unusual or nontrivial.",
    "metricEvaluationResponse": {
      "NOS": {
        "adjustedThresholds": [
          0,
          3,
          8,
          100
        ],
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      },
      "McCC": {
        "adjustedThresholds": [
          0,
          1,
          4,
          100
        ],
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "inline_documentation": true
    },
    "submittedAt": 1615308137095
  },{
    "_id": {
      "$oid": "6047a96f31192234ea4a0d8f"
    },
    "userId": "6047a7175724d3d855637c4e",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Professional Developer",
      "gender": "male",
      "professionalExperience": 5,
      "academicExperience": 10,
      "programmingExperience": {
        "primaryLanguage": "C#",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I've tried several research prototypes that generate summaries and all of them have really low quality. Often, the important thing about the method is some subtle semantic trivia that, in my experience, no automated tool captures.",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "naming",
        "maintainability"
      ],
      "additionalSourceCodeCharacteristics": [
        "Error Proneness",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "1. It is public and exposed to other clients/libraries, or\n2. The semantics of the method are not fully obvious from the name.",
    "metricEvaluationResponse": {
      "MIMS": {
        "adjustedThresholds": [
          0,
          25,
          50,
          100
        ],
        "selectedCategories": [
          "Low"
        ],
        "agreeConceptuallyOnly": true
      },
      "naming": {
        "agreeConceptuallyOnly": true
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "maintainability": true,
      "naming": true
    },
    "submittedAt": 1615309167622
  },{
    "_id": {
      "$oid": "6047c66131192234ea4a13fb"
    },
    "userId": "6047c5175724d3d855637c51",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "female",
      "professionalExperience": 2,
      "academicExperience": 7,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "A tool to automatically generate summaries would be great if it were implemented as a plugin for Visual Studio Code :) ",
      "relativeImportance": [
        "size",
        "complexity",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Pretty much all methods should have a summary comment if someone else is going to read the code.",
    "metricEvaluationResponse": {
      "naming": {
        "agreeConceptuallyOnly": false,
        "selectedCategories": [
          "Very Few"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true
    },
    "submittedAt": 1615316577350
  },{
    "_id": {
      "$oid": "6047d2b031192234ea4a16a7"
    },
    "userId": "6047ce155724d3d855637c52",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 17,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "The point of a comment/summary is to clarify what is not obvious in the code. Automatic generation of summaries would only generate what is obvious though.",
      "situations": "Only if the tool is smart enough to analyze the method body (together with the class/module where it exists), and deduce the method contract (pre-condition and post-condition) with a high-level of accuracy.",
      "relativeImportance": [
        "complexity",
        "size",
        "naming",
        "coupling",
        "maintainability"
      ],
      "additionalSourceCodeCharacteristics": [
        "Implicit assumptions about arguments"
      ],
      "extrinsicCharacteristics": [
        "Engineering process and/or code certification requirements."
      ]
    },
    "generalThoughts": "When a method body is at least 3 lines of code, or when the method makes some implicit assumptions about its input arguments.",
    "metricEvaluationResponse": {
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      },
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Medium",
          "Large"
        ]
      },
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Low",
          "Average",
          "High"
        ]
      },
      "naming": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true,
      "maintainability": true,
      "coupling": true
    },
    "submittedAt": 1615319728781
  },{
    "_id": {
      "$oid": "6047f73d31192234ea4a1ef8"
    },
    "userId": "6047f3545724d3d855637c53",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 0,
      "academicExperience": 2,
      "programmingExperience": {
        "primaryLanguage": "C++",
        "familiarWithJava": "No"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "",
      "situations": "Code is written by myself and is readable for me without summaries, but the code is needed to be shared with others.",
      "relativeImportance": [
        "size",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [
        "Code Quality",
        "Whether the method is part of a public facing API"
      ],
      "extrinsicCharacteristics": [
        "Project Deadlines",
        "Team Priorities"
      ]
    },
    "generalThoughts": "The functionality is not obvious, e.g., the body is long.",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          4,
          100
        ],
        "selectedCategories": [
          "High",
          "Average"
        ],
        "agreeConceptuallyOnly": false
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          5,
          10,
          100
        ],
        "selectedCategories": [
          "Large"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "coupling": false,
      "complexity": true,
      "naming": false
    },
    "submittedAt": 1615329085799
  },{
    "_id": {
      "$oid": "60486d3f31192234ea4a2c0e"
    },
    "userId": "60486b205724d3d855637c55",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "High coupling": true
        },
        "additionalFeedback": "It would be better to explicitly say that changing this method would require further changes to other methods"
      },
      "cohesion": {
        "situations": {
          "Low cohesion": true
        },
        "additionalFeedback": "Maybe listing those unrelated tasks one by one in comments would help"
      }
    },
    "demographicResponse": {
      "occupation": "Undergraduate Student",
      "gender": "male",
      "professionalExperience": 0,
      "academicExperience": 2,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I have no idea whether automatically-generated code summary is reliable",
      "situations": "The code base is too large for me to reason about, and no developers would like to write code cummary themselves. I would then use automatically-generated summaries for my own reference.",
      "relativeImportance": [
        "coupling",
        "cohesion",
        "naming"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "Make code easier and quicker for developers (themselves or other collaborators) to understand",
    "metricEvaluationResponse": {
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Very Few"
        ]
      }
    },
    "relevantMetrics": {
      "naming": true,
      "coupling": true,
      "cohesion": true
    },
    "submittedAt": 1615359295923
  },{
    "_id": {
      "$oid": "6048747831192234ea4a2cf5"
    },
    "userId": "6048726a5724d3d855637c56",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "Low coupling": true
        },
        "additionalFeedback": "The highly-coupled methods may not have very independent functionality, thus might not need a summary"
      },
      "cohesion": {
        "situations": {
          "Low cohesion": false,
          "High cohesion": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 5,
      "academicExperience": 3,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "size",
        "naming",
        "coupling",
        "cohesion"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "If the method is complicated, like, has too much lines of code. Or if the logic of this method is not explicit, like, has intricate algorithm",
    "metricEvaluationResponse": {
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": true,
        "additionalFeedback": "",
        "selectedCategories": [
          "Few"
        ]
      },
      "NOS": {
        "adjustedThresholds": [
          0,
          20,
          40,
          100
        ],
        "selectedCategories": [
          "Medium"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true,
      "naming": true,
      "cohesion": true,
      "coupling": true
    },
    "submittedAt": 1615361144697
  },{
    "_id": {
      "$oid": "6048c8eb31192234ea4a379f"
    },
    "userId": "6047c3f95724d3d855637c50",
    "conceptEvaluationResponse": {
      "coupling": {
        "situations": {
          "Low coupling": true
        },
        "additionalFeedback": ""
      }
    },
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "male",
      "professionalExperience": 5,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "",
      "relativeImportance": [
        "maintainability",
        "coupling",
        "naming",
        "complexity"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "All methods, basically, except for those are very simple and easy-to-understand.\n",
    "metricEvaluationResponse": {
      "MIMS": {
        "name": "MIMS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High",
          "Low"
        ]
      },
      "naming": {
        "name": "naming",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Very Few",
          "None"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average",
          "High"
        ]
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "coupling": true,
      "maintainability": true,
      "naming": true
    },
    "submittedAt": 1615382763309
  },{
    "_id": {
      "$oid": "6049d15331192234ea4a551f"
    },
    "userId": "6049cecb5724d3d855637c59",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Working in Academia",
      "gender": "female",
      "professionalExperience": 0,
      "academicExperience": 10,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "No",
      "elaborate": "I do not trust that a tool able to generate really *useful* summaries currently exists or might exist. In the end, I would have to check the generated summaries, possibly modify them and add others. It seems to be less of an effort to write those myself (although I agree that maintaining them is annoying --- maybe a tool that automatically maintains written summaries would be more useful, if possible?). ",
      "situations": "",
      "relativeImportance": [
        "complexity",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "1. In case of a particularly long method, with many sub-cases, with complex functionality.\n2. In case I want to match the code to the formalization of the approach in a paper.",
    "metricEvaluationResponse": {
      "NOS": {
        "name": "NOS",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Large"
        ]
      },
      "McCC": {
        "name": "McCC",
        "agreeConceptuallyOnly": false,
        "additionalFeedback": "",
        "selectedCategories": [
          "Average"
        ]
      }
    },
    "relevantMetrics": {
      "size": true,
      "complexity": true
    },
    "submittedAt": 1615450451072
  },{
    "_id": {
      "$oid": "604a124a31192234ea4a5dea"
    },
    "userId": "604a10ac5724d3d855637c5a",
    "conceptEvaluationResponse": {},
    "demographicResponse": {
      "occupation": "Graduate Student",
      "gender": "male",
      "professionalExperience": 2,
      "academicExperience": 5,
      "programmingExperience": {
        "familiarWithJava": "Yes"
      }
    },
    "exitSurveyResponse": {
      "additionalElaboration": "",
      "extrinsicElaboration": "",
      "wouldUse": "Yes",
      "elaborate": "",
      "situations": "Every time I feel that a method is too complicated.",
      "relativeImportance": [
        "complexity",
        "size"
      ],
      "additionalSourceCodeCharacteristics": [],
      "extrinsicCharacteristics": []
    },
    "generalThoughts": "When the method is complicated, so the method name and body don't explain the method function \"by themselves\".",
    "metricEvaluationResponse": {
      "McCC": {
        "adjustedThresholds": [
          0,
          2,
          11,
          100
        ],
        "selectedCategories": [
          "High"
        ],
        "agreeConceptuallyOnly": true
      },
      "NOS": {
        "agreeConceptuallyOnly": true
      }
    },
    "relevantMetrics": {
      "complexity": true,
      "maintainability": false,
      "inline_documentation": false,
      "size": true
    },
    "submittedAt": 1615467082803
  },
    {
        "_id": {
            "$oid": "6021bab631192234ea43f802"
        },
        "userId": "6021b9bf5724d3d855637bbf",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 10,
            "academicExperience": 0,
            "programmingExperience": {
                "primaryLanguage": "C++",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "Complexity and number of parameters",
            "wouldUse": "No",
            "elaborate": "",
            "situations": "Will use it only to generate the template comment",
            "relativeImportance": [],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "When the method is exposed in public API or when it is complex with multiple parameters",
        "metricEvaluationResponse": {},
        "relevantMetrics": {}
    },
    {
        "_id": {
            "$oid": "6022074131192234ea440960"
        },
        "userId": "602201d95724d3d855637bc2",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "prefer not to disclose",
            "professionalExperience": 8,
            "academicExperience": 6,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "If my team is confused during a code review for a method, I will try to rewrite the code/rename some identifiers AND write a short comment explaining the method.",
            "wouldUse": "No",
            "elaborate": "I do not trust auto summarization to create high-calibre comments required for code summaries for the code that really requires summaries. The summaries MUST be better than, for example, /** Gets all resources */ public void getAllResources() { icbm.setTarget(GPS.getCurrentLatLong()).launch(); }\n\nAn anti-pattern I see in codebases is unmodified comments that are auto-generated by the IDE. Auto-generated comments with no content are less helpful than no comments!\n",
            "situations": "An common gripe about commenting code  is that it falls out of sync with the code. So if auto-summaries are VERY smart, then I'd use an auto-summary tool.\n\nFor example, if a summary tool CAN in fact summarize the method as /** Send a nuke to current location */ public void getAllResources() { icbm.setTarget(GPS.getCurrentLatLong()).launch(); }\n\nThen by all means, auto-summarize for me!",
            "relativeImportance": [
                "coupling",
                "size",
                "complexity",
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Error Proneness"
            ],
            "extrinsicCharacteristics": [
                "Team Priorities"
            ]
        },
        "generalThoughts": "I'm not really sure. Lately, I've been trying to write smaller methods with very descriptive names and expressive typing (in TypeScript and the latest static-typing extensions to Python). In these cases, I'm writing fewer and fewer method summary comments. However, I ALWAYS document methods for public-facing APIs, no matter how small (at least I try to ;]).",
        "metricEvaluationResponse": {
            "McCC": {
                "adjustedThresholds": [
                    0,
                    3,
                    7,
                    100
                ],
                "selectedCategories": [
                    "Average",
                    "High"
                ]
            },
            "NOS": {
                "adjustedThresholds": [
                    0,
                    4,
                    10,
                    100
                ],
                "selectedCategories": [
                    "Large"
                ]
            },
            "naming": {
                "agreeConceptuallyOnly": true
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "naming": true,
            "size": true,
            "maintainability": false,
            "coupling": true
        }
    },
    {
        "_id": {
            "$oid": "6022421931192234ea441696"
        },
        "userId": "60223ff75724d3d855637bc7",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 15,
            "academicExperience": 5,
            "programmingExperience": {
                "primaryLanguage": "C++",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "I may comment more method that are the exposed method for other people to use and less the one that are more for internal use.",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "The problem with comment is that they need to be maintained and takes time. I try to write clean and readable code so comment are not necessary",
            "situations": "",
            "relativeImportance": [
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": [
                "Project Deadlines"
            ]
        },
        "generalThoughts": "I rarely do a summary comment, I try to choose a good name for the method and the parameters that describes what it's doing.",
        "metricEvaluationResponse": {
            "naming": {
                "adjustedThresholds": [
                    1,
                    3,
                    7,
                    20
                ],
                "selectedCategories": [
                    "Few"
                ],
                "agreeConceptuallyOnly": true
            }
        },
        "relevantMetrics": {
            "naming": true,
            "coupling": false
        }
    },
    {
        "_id": {
            "$oid": "60229a8b31192234ea4429c4"
        },
        "userId": "6022903d5724d3d855637bca",
        "conceptEvaluationResponse": {
            "cohesion": {
                "situations": {
                    "High cohesion": true
                },
                "additionalFeedback": ""
            },
            "inline_documentation": {
                "situations": {
                    "High quality inline documentation": true
                },
                "additionalFeedback": ""
            },
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "female",
            "professionalExperience": 13,
            "academicExperience": 6,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "There's a lot in those Aspects that should just not exist and do not require comments, only code review :\n- bad naming\n- Size of method ( should be split right away before mergint into the project)\n\nCohesion and coupling show an issue in Code Design. it should be documented and tacle as fast as possible",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "complexity",
                "coupling",
                "size",
                "cohesion",
                "naming",
                "inline_documentation",
                "maintainability"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": [
                "Project Deadlines"
            ]
        },
        "generalThoughts": "A comment should be used when the line of code is not clear to anyone in the team.\n\nAlways have a block code so we can generate documentation with javadoc.\nDocumentation are like test : You have to maintain it, so it's better to be centralized",
        "metricEvaluationResponse": {
            "MIMS": {
                "adjustedThresholds": [
                    0,
                    44,
                    79,
                    100
                ],
                "agreeConceptuallyOnly": false
            },
            "McCC": {
                "adjustedThresholds": [
                    0,
                    22,
                    40,
                    100
                ],
                "selectedCategories": [
                    "Low"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Small"
                ]
            },
            "naming": {
                "agreeConceptuallyOnly": false,
                "selectedCategories": [
                    "Several"
                ]
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "coupling": true,
            "size": true,
            "naming": true,
            "inline_documentation": true,
            "maintainability": true,
            "cohesion": true
        }
    },
    {
        "_id": {
            "$oid": "6022b1e131192234ea44318e"
        },
        "userId": "6022afdb5724d3d855637bcc",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "Low coupling": true,
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 16,
            "academicExperience": 4,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "complexity",
                "coupling",
                "size",
                "maintainability",
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [
                "Automatic documentation generation, e.g. javadoc"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Any method that is more than a few simple lines of code or not immediately self-explanatory, regardless of complexity.",
        "metricEvaluationResponse": {
            "naming": {
                "adjustedThresholds": [
                    1,
                    3,
                    8,
                    20
                ],
                "selectedCategories": [
                    "None"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Large",
                    "Medium"
                ]
            },
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low",
                    "Average",
                    "High"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low",
                    "Average",
                    "High"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "complexity": true,
            "naming": true,
            "coupling": true,
            "maintainability": true
        }
    },
    {
        "_id": {
            "$oid": "6022c0d731192234ea44399d"
        },
        "userId": "6022bd595724d3d855637bce",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            },
            "inline_documentation": {
                "situations": {
                    "No inline documentation": true,
                    "Poor quality inline documentation": true
                },
                "additionalFeedback": ""
            },
            "cohesion": {
                "situations": {
                    "Low cohesion": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 15,
            "academicExperience": 6,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "My rankings on Q1 of this page (the order of importance) is largely based on the ability to modify them independently - for example, it isn't that I think the quality of identifiers is less important generally than cohesion for determining the need for summary comments, as much as I would advocate for renaming your identifiers to be higher quality rather than just adding a summary comment.  Complexity and Coupling are often the more difficult of those issues to fix, which is why I would consider adding a summary comment to help alleviate those concerns to be acceptable (rather than just fixing them).",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "I generally use an automatic summary tool (often built in to the IDE) that will generate an outline and snippets for parameter / return type descriptions.  I've never used one that attempts to generate a summary further than that, but every little bit helps.",
            "relativeImportance": [
                "complexity",
                "coupling",
                "inline_documentation",
                "cohesion",
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Application Domain"
            ],
            "extrinsicCharacteristics": [
                "Team Priorities"
            ]
        },
        "generalThoughts": "A method needs a summary comment when the execution may have requirements or unintended side effects that are not evident from the method name, when it has parameters that need additional information to ensure they are passed and used correctly, or when there is significant business logic included that would be prohibitively long to use the method name to describe",
        "metricEvaluationResponse": {
            "McCC": {
                "adjustedThresholds": [
                    0,
                    2,
                    7,
                    100
                ],
                "selectedCategories": [
                    "High"
                ],
                "agreeConceptuallyOnly": false
            },
            "naming": {
                "adjustedThresholds": [
                    1,
                    2,
                    5,
                    20
                ],
                "selectedCategories": [
                    "Few",
                    "Several"
                ]
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "naming": true,
            "cohesion": true,
            "coupling": true,
            "inline_documentation": true
        }
    },
    {
        "_id": {
            "$oid": "6022d00f31192234ea443e64"
        },
        "userId": "6022cc8d5724d3d855637bd0",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 6,
            "academicExperience": 5,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "- inability to rename the method during re-factoring due to too many side effects \n- the method is a part of a library that is being used by many external teams",
            "extrinsicElaboration": "- coding conventions of the team or the project  \n",
            "wouldUse": "Yes",
            "elaborate": "intellij for generating a skeleton",
            "situations": "whenever my team forces me :)",
            "relativeImportance": [
                "coupling",
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Error Proneness",
                "Application Domain"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "I only use the comments when something is highly ambiguous or not clear from the naming itself. or maybe sometimes during refactoring because I don't want to rename the method due to too much side effects. Most of the time I just rely on the name of the method instead of comment as suggested by CleanCode book. ",
        "metricEvaluationResponse": {
            "naming": {
                "name": "naming",
                "agreeConceptuallyOnly": true,
                "additionalFeedback": "",
                "selectedCategories": []
            }
        },
        "relevantMetrics": {
            "naming": true,
            "coupling": true
        }
    },
    {
        "_id": {
            "$oid": "6022e57831192234ea444517"
        },
        "userId": "6022e3345724d3d855637bd1",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 9,
            "academicExperience": 5,
            "programmingExperience": {
                "primaryLanguage": "Swift",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "I feel like if a software can automatically generate summaries it is not useful to add a summary because I would keep summaries for complex piece of code or specific thing and not add them everywhere. I would not want to have a \"generic\" summary generated everywhere to not surcharge the files.",
            "situations": "",
            "relativeImportance": [
                "complexity",
                "size"
            ],
            "additionalSourceCodeCharacteristics": [
                "Error Proneness",
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "when there function is larger than usual, adding the summary allow to understand what it does at first sight in addition to the function name",
        "metricEvaluationResponse": {
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Small"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "complexity": true
        }
    },
    {
        "_id": {
            "$oid": "6024046631192234ea449365"
        },
        "userId": "602402845724d3d855637bd5",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Graduate Student",
            "gender": "male",
            "professionalExperience": 3,
            "academicExperience": 8,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "I would like to manually curate the suggest summaries, but would definitely consider using them as a starting point.",
            "situations": "I would likely be willing to add them directly for methods that I *might* document if I had time, but have to move on to more implementation. So I think it would be a tool to enhance my overall documentation quality.",
            "relativeImportance": [
                "naming",
                "complexity",
                "size",
                "coupling"
            ],
            "additionalSourceCodeCharacteristics": [
                "Error Proneness"
            ],
            "extrinsicCharacteristics": [
                "Project Deadlines"
            ]
        },
        "generalThoughts": "I usually leave a summary comment if the method is particularly long, or important. More so if the name of the method is not self explanatory (which often happens if I expect to use it a lot, and don't want to have a verbose name).",
        "metricEvaluationResponse": {
            "NOS": {
                "adjustedThresholds": [
                    0,
                    4,
                    11,
                    100
                ],
                "selectedCategories": [
                    "Large"
                ],
                "agreeConceptuallyOnly": true
            },
            "naming": {
                "name": "naming",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Few"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "complexity": true,
            "naming": true,
            "coupling": true
        }
    },
    {
        "_id": {
            "$oid": "60240c9531192234ea449539"
        },
        "userId": "602402f25724d3d855637bd6",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Working in Academia",
            "gender": "prefer not to disclose",
            "professionalExperience": 15,
            "academicExperience": 15,
            "programmingExperience": {
                "primaryLanguage": "Javascript",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "Whether the method/function relates to a domain-specific algorithm and method --> in this case summary comment should definitely be created and potentially refer to source/published resources.",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "For me, the comments are a way to understand the programmer's intention (beyond what can be inferred from reading the code itself) - don't think this can be automated.",
            "situations": "",
            "relativeImportance": [
                "size",
                "complexity"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Application Domain"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "I *try* to add summary comments whenever I write a function but especially in the initial iteration phase this doesn't always happen. My pattern to force this is to do it whenever I create a commit. I make sure to add comments to any new/updated function.",
        "metricEvaluationResponse": {
            "NOS": {
                "adjustedThresholds": [
                    0,
                    3,
                    12,
                    100
                ],
                "selectedCategories": [
                    "Medium",
                    "Large"
                ]
            },
            "McCC": {
                "adjustedThresholds": [
                    0,
                    1,
                    10,
                    100
                ],
                "selectedCategories": [
                    "Average",
                    "High"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "complexity": true
        }
    },
    {
        "_id": {
            "$oid": "6024228e31192234ea449a61"
        },
        "userId": "60241d415724d3d855637bdb",
        "conceptEvaluationResponse": {
            "inline_documentation": {
                "additionalFeedback": "I think it is independent of the inline summary. As I learned in university, the summary comment is used to describe what the method abstractly does and is not concerned with implementation details. For implementation comments I would use inline comments. Of course, if e.g. a method does breath search I would state that, but I would not explain how it works."
            }
        },
        "demographicResponse": {
            "occupation": "Undergraduate Student",
            "gender": "male",
            "professionalExperience": 1,
            "academicExperience": 3,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "I think those aspects in Q1 are all irrelevant for that decision. It is only dependent on the purpose the method has in respect to the whole application.",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "if it works good, however I do not feel that it is possible.",
            "situations": "if it is good, any time actually",
            "relativeImportance": [
                "naming",
                "complexity",
                "inline_documentation"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Application Domain"
            ],
            "extrinsicCharacteristics": [
                "Project Deadlines",
                "Team Priorities"
            ]
        },
        "generalThoughts": "When the method is public. E.g. an interface method. If it is only called inside a class, i would not comment it. In addition, if I code something \"quick and dirty\" for my own purpose only I seldomly comment.",
        "metricEvaluationResponse": {
            "McCC": {
                "adjustedThresholds": [
                    0,
                    2,
                    7,
                    100
                ],
                "selectedCategories": [],
                "agreeConceptuallyOnly": true
            },
            "naming": {
                "name": "naming",
                "agreeConceptuallyOnly": true,
                "additionalFeedback": "",
                "selectedCategories": []
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "naming": true,
            "inline_documentation": true
        }
    },
    {
        "_id": {
            "$oid": "6024263531192234ea449b50"
        },
        "userId": "6024244c5724d3d855637bdc",
        "conceptEvaluationResponse": {
            "cohesion": {
                "situations": {
                    "High cohesion": true
                },
                "additionalFeedback": ""
            },
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "prefer not to disclose",
            "professionalExperience": 7,
            "academicExperience": 6,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "size",
                "complexity",
                "cohesion",
                "coupling"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Usually always for public methods and non-trivial (more than the typical one-liners) helper methods.",
        "metricEvaluationResponse": {
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average",
                    "High"
                ]
            },
            "NOS": {
                "adjustedThresholds": [
                    0,
                    6,
                    12,
                    100
                ],
                "selectedCategories": [
                    "Medium",
                    "Large"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "complexity": true,
            "cohesion": true,
            "coupling": true
        }
    },
    {
        "_id": {
            "$oid": "602436ff31192234ea449efa"
        },
        "userId": "602435af5724d3d855637be6",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 25,
            "academicExperience": 10,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "complexity",
                "size",
                "coupling",
                "maintainability"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "All methods with 2+ lines of code required summary comments. I don't add a summary to a method only when the method implements low complexity logic.",
        "metricEvaluationResponse": {
            "MIMS": {
                "agreeConceptuallyOnly": true
            },
            "NOS": {
                "adjustedThresholds": [
                    0,
                    3,
                    15,
                    100
                ],
                "selectedCategories": [
                    "Medium",
                    "Large"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average",
                    "High"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "complexity": true,
            "coupling": true,
            "maintainability": true
        }
    },
    {
        "_id": {
            "$oid": "602476ad31192234ea44ac80"
        },
        "userId": "60245fad5724d3d855637be9",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            },
            "inline_documentation": {
                "situations": {
                    "No inline documentation": true,
                    "Poor quality inline documentation": true
                },
                "additionalFeedback": ""
            },
            "cohesion": {
                "situations": {
                    "Low cohesion": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "",
            "gender": "male",
            "professionalExperience": 12,
            "academicExperience": 1,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "To generate good / non trivial summary, i feel like the generator would need some manual guidance in the form of metadata provided by the programmer. Might as well write a summary in these cases. ",
            "situations": "To generate some API doc in a format that is easy to publish (HTML, pdf...), maybe",
            "relativeImportance": [
                "inline_documentation",
                "coupling",
                "cohesion",
                "maintainability"
            ],
            "additionalSourceCodeCharacteristics": [
                "Error Proneness",
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": [
                "Project Deadlines"
            ]
        },
        "generalThoughts": "When the arguments or the return value of the method is not obvious, or when they have special values. An example would be a method that returns a negative value as an error code or something like that (array.find() in javascript):  \n<code>\n// Return the index of the key, if found or -1 if not found\npublic int Array::indexOf( const char* key); \n</code>\nAlso when the method name is not self-explanatory or misleading, although i would avoid this situation in the first place if i could... ",
        "metricEvaluationResponse": {
            "naming": {
                "adjustedThresholds": [
                    1,
                    3,
                    9,
                    20
                ],
                "agreeConceptuallyOnly": false,
                "selectedCategories": []
            },
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low",
                    "Average"
                ]
            }
        },
        "relevantMetrics": {
            "naming": false,
            "inline_documentation": true,
            "coupling": true,
            "complexity": false,
            "cohesion": true,
            "maintainability": true
        }
    },
    {
        "_id": {
            "$oid": "6025296d31192234ea44d222"
        },
        "userId": "60250b4b5724d3d855637bed",
        "conceptEvaluationResponse": {
            "inline_documentation": {
                "situations": {
                    "Poor quality inline documentation": true,
                    "No inline documentation": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Working in Academia",
            "gender": "prefer not to disclose",
            "professionalExperience": 5,
            "academicExperience": 3,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "If it's common to execute a linter who generates a warning for each undocumented public method, it can be annoying to not follow this guideline just for the sake of saving a bit time of typing. :) ",
            "wouldUse": "Yes",
            "elaborate": "If the tool could help me to apply a useful pattern for the summaries, why not? ",
            "situations": "Either during refactoring or when I want to clean up a codebase without many summaries. I probably wouldn't use it when just writing the method - except it's quite fast. ",
            "relativeImportance": [
                "size",
                "complexity",
                "inline_documentation",
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": [
                "Team Priorities",
                "Linter",
                "Coding Guidelines"
            ]
        },
        "generalThoughts": "If my linter forces me too or if my method is not just a short helper (few lines) or requires kind of many parameters.",
        "metricEvaluationResponse": {
            "naming": {
                "adjustedThresholds": [
                    1,
                    2,
                    8,
                    20
                ],
                "agreeConceptuallyOnly": true,
                "selectedCategories": [
                    "Very Few"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Medium"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "maintainability": false,
            "inline_documentation": true,
            "cohesion": false,
            "complexity": true,
            "naming": true
        }
    },
    {
        "_id": {
            "$oid": "602622c231192234ea45079f"
        },
        "userId": "602621405724d3d855637bf1",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 21,
            "academicExperience": 3,
            "programmingExperience": {
                "primaryLanguage": "C#",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "Tools provide little value, just rehashing things that are obviously present in the code, for a comment to have value, it needs to describe something that isn't obvious.",
            "situations": "",
            "relativeImportance": [
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "If it's method is part of a public api, it probably needs a summary, otherwise it probably shouldn't.",
        "metricEvaluationResponse": {
            "naming": {
                "name": "naming",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Very Few"
                ]
            }
        },
        "relevantMetrics": {
            "naming": true
        }
    },
    {
        "_id": {
            "$oid": "6026234b31192234ea4507cd"
        },
        "userId": "6026213d5724d3d855637bf0",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 7,
            "academicExperience": 0,
            "programmingExperience": {
                "primaryLanguage": "Python",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "I have tried some documentation generating code before and it generally has enough drawbacks to be less efficient than manually writing",
            "situations": "",
            "relativeImportance": [
                "size",
                "complexity",
                "maintainability",
                "coupling"
            ],
            "additionalSourceCodeCharacteristics": [
                "Adherence to Coding Style Standards",
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": [
                "Project Deadlines",
                "Team Priorities"
            ]
        },
        "generalThoughts": "My python linter requires at least one top level comment for every function. Sometimes they are redundant or simple (as expected) and I try to improve as the code base is seen by more contributors",
        "metricEvaluationResponse": {
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low",
                    "Average"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average",
                    "High"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Medium",
                    "Large"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "complexity": true,
            "maintainability": true,
            "coupling": true
        }
    },
    {
        "_id": {
            "$oid": "6026240c31192234ea450866"
        },
        "userId": "6026221b5724d3d855637bf4",
        "conceptEvaluationResponse": {
            "cohesion": {
                "situations": {
                    "Low cohesion": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "prefer not to disclose",
            "professionalExperience": 43,
            "academicExperience": 3,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "Methods that must never be changed because somewhere something depends on it remaining that way.",
            "wouldUse": "Yes",
            "elaborate": "</inheritdoc >",
            "situations": "Implementing an interface.\nGenerating code from a spec (e.g. Swagger / OpenAPI)",
            "relativeImportance": [
                "naming",
                "cohesion",
                "complexity"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Always. But it deserves a useful comment when it does more than one thing or has any side effects. If the name and parameters of the method do not explain what it does then the comment should.",
        "metricEvaluationResponse": {
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low"
                ]
            },
            "naming": {
                "name": "naming",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "None"
                ]
            }
        },
        "relevantMetrics": {
            "naming": true,
            "complexity": true,
            "cohesion": true
        }
    },
    {
        "_id": {
            "$oid": "6026256031192234ea450a59"
        },
        "userId": "6026239d5724d3d855637bf8",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "non-binary",
            "professionalExperience": 15,
            "academicExperience": 6,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "naming",
                "coupling"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "When its behavior, parameters, returns, and usage are not fully and clearly described by the name of the method.",
        "metricEvaluationResponse": {
            "naming": {
                "adjustedThresholds": [
                    1,
                    1,
                    3,
                    20
                ],
                "selectedCategories": [
                    "Very Few",
                    "Few",
                    "Several"
                ]
            }
        },
        "relevantMetrics": {
            "naming": true,
            "coupling": true
        }
    },
    {
        "_id": {
            "$oid": "6026294931192234ea450c60"
        },
        "userId": "602627ad5724d3d855637bfb",
        "conceptEvaluationResponse": {
            "inline_documentation": {
                "situations": {
                    "High quality inline documentation": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 30,
            "academicExperience": 5,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "always",
            "relativeImportance": [
                "inline_documentation"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Always add a brief comment on all methods.  At a minimum, describe the purpose of the method, the arguments and return.",
        "metricEvaluationResponse": {},
        "relevantMetrics": {
            "inline_documentation": true
        }
    },
    {
        "_id": {
            "$oid": "602640f431192234ea4512ac"
        },
        "userId": "60263dd55724d3d855637c04",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true
                },
                "additionalFeedback": "My comment regards indeed Quality of Ids: metrics should be relative to the size of the method signature (having 3 warnings in a method with no parameters would be as bad as or even worse than e.g. 6 warnings in a method with 5 params)."
            },
            "cohesion": {
                "situations": {
                    "Low cohesion": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Working in Academia",
            "gender": "male",
            "professionalExperience": 4,
            "academicExperience": 8,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "Requirements stability",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "complexity",
                "naming",
                "cohesion",
                "coupling"
            ],
            "additionalSourceCodeCharacteristics": [
                "Error Proneness",
                "Adherence to Coding Style Standards",
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Whenever the method exposes a public interface, as the comment becomes part of the API documentation (Javadoc). (Even if I'd later contradict myself...)",
        "metricEvaluationResponse": {
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average",
                    "High"
                ],
                "adjustedThresholds": [
                    0,
                    2,
                    10,
                    100
                ]
            },
            "naming": {
                "agreeConceptuallyOnly": true
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "naming": true,
            "coupling": true,
            "cohesion": true
        }
    },
    {
        "_id": {
            "$oid": "60269a4531192234ea452664"
        },
        "userId": "602695d95724d3d855637c0a",
        "conceptEvaluationResponse": {
            "inline_documentation": {
                "additionalFeedback": "I don't think inline documentation is a factor to whether a method should have a summary. They may complement each other or not be necessary at all depending on the code quality."
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 17,
            "academicExperience": 7,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "",
            "situations": "Not sure, I'm afraid there would be additional effort to make them good.",
            "relativeImportance": [
                "complexity",
                "inline_documentation"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Error Proneness",
                "Adherence to Coding Style Standards"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "If the method is a part of a public API, if arguments relies on special requirements, if exceptions can be thrown and callers should be aware of them to deal with errors, if the method deserves special documentation to make some behavior explicit.",
        "metricEvaluationResponse": {
            "McCC": {
                "agreeConceptuallyOnly": true
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "inline_documentation": true
        }
    },
    {
        "_id": {
            "$oid": "6026a54131192234ea452a41"
        },
        "userId": "6026a27d5724d3d855637c0c",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Working in Academia",
            "gender": "male",
            "professionalExperience": 6,
            "academicExperience": 6,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "That would help saving my time to write the summary. If the generated summary is good enough, then I can just tweak it a bit to fit my needs.",
            "situations": "- After I finish writing new code in my IDE.\n- After I refactor the code.",
            "relativeImportance": [
                "complexity",
                "maintainability"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Code Quality"
            ],
            "extrinsicCharacteristics": [
                "Team Priorities"
            ]
        },
        "generalThoughts": "I usually add a summary comment that the code is complicated enough so that I think I may forget what it does when I come back to read it again.",
        "metricEvaluationResponse": {
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average",
                    "Low"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average",
                    "High"
                ]
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "maintainability": true
        }
    },
    {
        "_id": {
            "$oid": "602a88a831192234ea464cc7"
        },
        "userId": "602a83af5724d3d855637c10",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Graduate Student",
            "gender": "male",
            "professionalExperience": 9,
            "academicExperience": 3,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "Triviality, i.e., if the method is succinctly described by other documentation and its name",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "Given a sufficient quality of the tool's outputs. I would, however, manually verify, that the output is correct.",
            "situations": "In any situation where the tool would work correctly.",
            "relativeImportance": [
                "size"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Almost always. Exceptions may be methods that are \"boilerplate\", e.g. a Java getter or setter that does not have any semantics besides field access (e.g., returns unmodifiable, requires non-null) if the field itself is documented and the documentation would amount to \"writes #field\". Generally, summaries should ensure that a consumer of my code does not need to read my source code. I also document private methods.",
        "metricEvaluationResponse": {
            "MIMS": {
                "adjustedThresholds": [
                    0,
                    50,
                    65,
                    100
                ],
                "selectedCategories": [
                    "Low",
                    "Average",
                    "High"
                ]
            },
            "McCC": {
                "adjustedThresholds": [
                    0,
                    3,
                    6,
                    100
                ],
                "selectedCategories": [
                    "Low",
                    "Average",
                    "High"
                ]
            },
            "naming": {
                "adjustedThresholds": [
                    1,
                    2,
                    4,
                    20
                ],
                "selectedCategories": [
                    "None",
                    "Very Few",
                    "Few",
                    "Several"
                ]
            },
            "NOS": {
                "adjustedThresholds": [
                    0,
                    2,
                    15,
                    100
                ],
                "selectedCategories": [
                    "Medium",
                    "Large"
                ]
            }
        },
        "relevantMetrics": {
            "maintainability": false,
            "complexity": false,
            "size": true,
            "cohesion": false,
            "coupling": false,
            "inline_documentation": false,
            "naming": false
        }
    },
    {
        "_id": {
            "$oid": "602d5e5d31192234ea46fbe3"
        },
        "userId": "602d5c945724d3d855637c12",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "Low coupling": true,
                    "High coupling": true
                },
                "additionalFeedback": "Source code generally needs comments. When there is interdependence between components, that only increases the need for comments, not the other way around."
            }
        },
        "demographicResponse": {
            "occupation": "Graduate Student",
            "gender": "male",
            "professionalExperience": 3,
            "academicExperience": 4,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "I would argue that maintainability and coupling are similar topics (coupled code is harder to maintain / make changes to).",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "It's unclear that such a tool would be able to adequately capture intricacies in a non-trivial codebase.",
            "situations": "",
            "relativeImportance": [
                "complexity",
                "maintainability",
                "coupling",
                "size"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "All methods need comments -- a user shouldn't need to read a function to know what it does. Having comments make it easy in an IDE to look at the comments when considering different completions.",
        "metricEvaluationResponse": {
            "MIMS": {
                "adjustedThresholds": [
                    0,
                    28,
                    47,
                    100
                ],
                "selectedCategories": [
                    "Low",
                    "Average",
                    "High"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low",
                    "Average",
                    "High"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Small",
                    "Medium",
                    "Large"
                ]
            }
        },
        "relevantMetrics": {
            "maintainability": true,
            "complexity": true,
            "coupling": true,
            "naming": false,
            "size": true
        }
    },
    {
        "_id": {
            "$oid": "602d63d731192234ea46fd9a"
        },
        "userId": "602d61e55724d3d855637c13",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Graduate Student",
            "gender": "male",
            "professionalExperience": 1,
            "academicExperience": 11,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "I've noticed that in certain application domains, such as scientific computing, it is much more likely that I'll use summary comments, just to explain the mathemtical computation being carried out by the method.",
            "extrinsicElaboration": "Project deadlines definitely have an impact; if a project has strict time constraints you won't have the luxury of taking the time to comment everything.",
            "wouldUse": "No",
            "elaborate": "So far, the tools that are available in IDEs only generate comments for simplistic cases, where summary comments are really not needed. I also think that the times where I would want a summary comment, I would prefer to write the comment on my own to make sure that I'm conveying all that's important. However, if a tool could do this, at a quality that's as good as comments I write myself, then I would use it, although I'm skeptical if this is possible.",
            "situations": "refer to my previous answer",
            "relativeImportance": [
                "maintainability",
                "size"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Application Domain"
            ],
            "extrinsicCharacteristics": [
                "Project Deadlines"
            ]
        },
        "generalThoughts": "Typically, I try to have summary comments for methods where their name doesn't convey enough about what the method does. However, when I work on a library that is going to be consumed by other developers, I try to comment every method in the API, that can then be used to automatically generate documentation. I'll say that not all summary comments are created equal; some contain important information about the method's behavior that can't solely be conveyed through the method name (such as edge cases, exception behavior etc.)",
        "metricEvaluationResponse": {
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Medium",
                    "Large"
                ]
            }
        },
        "relevantMetrics": {
            "size": true,
            "maintainability": true,
            "coupling": false
        }
    },
    {
        "_id": {
            "$oid": "602d753931192234ea470249"
        },
        "userId": "602d74a45724d3d855637c15",
        "conceptEvaluationResponse": {
            "inline_documentation": {
                "situations": {
                    "Poor quality inline documentation": true,
                    "High quality inline documentation": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 5,
            "academicExperience": 0,
            "programmingExperience": {
                "primaryLanguage": "Javascript",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "maintainability",
                "inline_documentation"
            ],
            "additionalSourceCodeCharacteristics": [
                "Error Proneness",
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Method comments are the easiest way to get good \\\"intellisense\\\" in JavaScript, so my rule of thumb is always including them for all methods on a class, and any function that is used outside the file it's defined in",
        "metricEvaluationResponse": {
            "MIMS": {
                "agreeConceptuallyOnly": true
            }
        },
        "relevantMetrics": {
            "inline_documentation": true,
            "maintainability": true
        }
    },
    {
        "_id": {
            "$oid": "602d767431192234ea47029d"
        },
        "userId": "602d756a5724d3d855637c16",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 8,
            "academicExperience": 17,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "I sometimes use automatically generated summaries from IDEs. Most often it is trivial, but if a tool can generate more complex types of summaries, I would use it.",
            "situations": "",
            "relativeImportance": [
                "maintainability",
                "complexity",
                "size",
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [
                "Code Quality",
                "Whether the method is part of a public facing API",
                "Application Domain"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Summary comments are good for automatically generating documentation (javadoc).",
        "metricEvaluationResponse": {
            "MIMS": {
                "adjustedThresholds": [
                    0,
                    15,
                    33,
                    100
                ],
                "selectedCategories": [
                    "High"
                ]
            },
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Small",
                    "Medium",
                    "Large"
                ]
            },
            "McCC": {
                "agreeConceptuallyOnly": true
            },
            "naming": {
                "name": "naming",
                "agreeConceptuallyOnly": true,
                "additionalFeedback": "",
                "selectedCategories": []
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "size": true,
            "maintainability": true,
            "naming": true
        }
    },
    {
        "_id": {
            "$oid": "602d77b031192234ea47030a"
        },
        "userId": "602d76e45724d3d855637c17",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 5,
            "academicExperience": 3,
            "programmingExperience": {
                "primaryLanguage": "Python",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "I've used IDE features to automatically fill a summary comment, but they require me to fill in the details (descriptions of the method, its arguments etc.). It is usually not worth it, especially for python where there are several different documentation styles.",
            "situations": "If the tool generates a human like summary without requiring me to fill it in, sure.",
            "relativeImportance": [
                "size"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Unless a method is a one off, or its obvious what it does (from its name), every method should have a summary comment, especially in a collaborative environment",
        "metricEvaluationResponse": {
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Medium",
                    "Large",
                    "Small"
                ]
            }
        },
        "relevantMetrics": {
            "size": true
        }
    },
    {
        "_id": {
            "$oid": "602d783131192234ea47032f"
        },
        "userId": "602d77be5724d3d855637c18",
        "conceptEvaluationResponse": {
            "inline_documentation": {
                "situations": {
                    "Poor quality inline documentation": true,
                    "No inline documentation": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 4,
            "academicExperience": 7,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "Poor quality code that is prone to errors seems like an obvious candidate for when you would want summary comments. The comments would perhaps help in being cognizant of the tricky parts of the method.",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "complexity",
                "inline_documentation"
            ],
            "additionalSourceCodeCharacteristics": [
                "Application Domain",
                "Code Quality",
                "Error Proneness"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "I think every method should have a summary comment, except when it's overriding a parent class' method which already has a summary comment, or if it's implementing an interface's method who has it's own summary comment.",
        "metricEvaluationResponse": {
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "High"
                ]
            }
        },
        "relevantMetrics": {
            "inline_documentation": true,
            "complexity": true
        }
    },
    {
        "_id": {
            "$oid": "602d78e031192234ea470381"
        },
        "userId": "602d788c5724d3d855637c19",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 2,
            "academicExperience": 5,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "What is the difference between complexity and maintainability? From the descriptions it seems like the two are quite interrelated.",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "maintainability",
                "complexity",
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "If the method is either complex or not really well-named or mixing technologies (for example on Android, a java/kotlin method calling C++)",
        "metricEvaluationResponse": {
            "naming": {
                "agreeConceptuallyOnly": true
            },
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low"
                ]
            },
            "McCC": {
                "agreeConceptuallyOnly": true
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "naming": true,
            "maintainability": true
        }
    },
    {
        "_id": {
            "$oid": "602d7a1931192234ea4703d8"
        },
        "userId": "602d79085724d3d855637c1a",
        "conceptEvaluationResponse": {
            "coupling": {
                "situations": {
                    "High coupling": true,
                    "Low coupling": true
                },
                "additionalFeedback": ""
            }
        },
        "demographicResponse": {
            "occupation": "",
            "gender": "male",
            "professionalExperience": 4,
            "academicExperience": 1,
            "programmingExperience": {
                "primaryLanguage": "Javascript",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "",
            "situations": "",
            "relativeImportance": [
                "maintainability",
                "complexity",
                "coupling"
            ],
            "additionalSourceCodeCharacteristics": [],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "I'm not really sure, I try to document most methods I work on, and I think it is important when working in a team/open source. In a lot of cases, a good method name will tell you what the purpose of the method is, but a comment can provide more information about its behavior under specific conditions.",
        "metricEvaluationResponse": {
            "NOS": {
                "name": "NOS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Medium"
                ]
            },
            "McCC": {
                "name": "McCC",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "High",
                    "Average"
                ]
            },
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Low"
                ],
                "adjustedThresholds": [
                    0,
                    32,
                    40,
                    100
                ]
            }
        },
        "relevantMetrics": {
            "size": false,
            "maintainability": true,
            "coupling": true,
            "complexity": true
        }
    },
    {
        "_id": {
            "$oid": "602d7b9931192234ea470450"
        },
        "userId": "602d7a9c5724d3d855637c1c",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 9,
            "academicExperience": 4,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "In my opinion, whether a method needs to be documented or not depends more on context than anything else. If it's a part of a public api, comments are mandatory; it does not matter how complex, maintainable, small or large a method is in this case, from the api consumer's perspective, its good to have comments for public apis.",
            "extrinsicElaboration": "While project deadlines are a factor in the short term, I would eventually add comments when I get time.",
            "wouldUse": "No",
            "elaborate": "I'm generally skeptical of automatic comments, as they tend to be generic and not useful.",
            "situations": "",
            "relativeImportance": [],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Application Domain"
            ],
            "extrinsicCharacteristics": [
                "Project Deadlines"
            ]
        },
        "generalThoughts": "Most methods need some kind of documentation, but I tend to omit comments from trivial/obvious methods.",
        "metricEvaluationResponse": {},
        "relevantMetrics": {
            "complexity": false,
            "maintainability": false,
            "coupling": false,
            "naming": false
        }
    },
    {
        "_id": {
            "$oid": "602d7c2931192234ea47047e"
        },
        "userId": "602d7bd05724d3d855637c1d",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 10,
            "academicExperience": 0,
            "programmingExperience": {
                "primaryLanguage": "Javascript",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "If a tool can do that and save me time, why not. But the quality of the tool would be a big factor.",
            "situations": "",
            "relativeImportance": [
                "naming"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API",
                "Adherence to Coding Style Standards"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "I use a Summary Comment when the WHY is not clear. If I have to explain the WHAT is generally a kind of red flag that my method is not enough good. ",
        "metricEvaluationResponse": {
            "naming": {
                "agreeConceptuallyOnly": true,
                "selectedCategories": []
            }
        },
        "relevantMetrics": {
            "naming": true
        }
    },
    {
        "_id": {
            "$oid": "602d7cd131192234ea4704cc"
        },
        "userId": "602d7c7d5724d3d855637c1f",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "male",
            "professionalExperience": 2,
            "academicExperience": 12,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "I have found tools that do this to generate generic comments which just add noise to the codebase.",
            "situations": "",
            "relativeImportance": [
                "complexity"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "When I write code someone else is gonna use/maintain",
        "metricEvaluationResponse": {
            "McCC": {
                "agreeConceptuallyOnly": true,
                "adjustedThresholds": [
                    0,
                    6,
                    33,
                    100
                ]
            }
        },
        "relevantMetrics": {
            "complexity": true,
            "size": false
        }
    },
    {
        "_id": {
            "$oid": "602d816331192234ea47060d"
        },
        "userId": "602d803b5724d3d855637c21",
        "conceptEvaluationResponse": {
            "inline_documentation": {
                "situations": {
                    "No inline documentation": true,
                    "Poor quality inline documentation": true
                },
                "additionalFeedback": "If there are enough inline comments, then there would be no need for summary comments"
            }
        },
        "demographicResponse": {
            "occupation": "Graduate Student",
            "gender": "female",
            "professionalExperience": 2,
            "academicExperience": 5,
            "programmingExperience": {
                "primaryLanguage": "Python",
                "familiarWithJava": "No"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "",
            "extrinsicElaboration": "",
            "wouldUse": "Yes",
            "elaborate": "",
            "situations": "It really depends on the tool. Can it generate detailed comments, like descriptions for parameters? That would be useful, and I would use it for that.",
            "relativeImportance": [
                "maintainability",
                "complexity",
                "naming",
                "inline_documentation"
            ],
            "additionalSourceCodeCharacteristics": [
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": [
                "Team Priorities"
            ]
        },
        "generalThoughts": "I try to comment most methods (and code in general) I write at my workplace. It helps both my teammates as well as myself when I revisit the code after a break. But whether or not something needs a summary comment, I think that's very context specific.",
        "metricEvaluationResponse": {
            "naming": {
                "name": "naming",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Few",
                    "Several"
                ]
            },
            "McCC": {
                "agreeConceptuallyOnly": false,
                "selectedCategories": [
                    "Average",
                    "High"
                ],
                "adjustedThresholds": [
                    0,
                    5,
                    10,
                    100
                ]
            },
            "MIMS": {
                "name": "MIMS",
                "agreeConceptuallyOnly": false,
                "additionalFeedback": "",
                "selectedCategories": [
                    "Average",
                    "Low"
                ]
            }
        },
        "relevantMetrics": {
            "maintainability": true,
            "complexity": true,
            "naming": true,
            "inline_documentation": true
        }
    },
    {
        "_id": {
            "$oid": "602d825a31192234ea47066c"
        },
        "userId": "602d81ac5724d3d855637c22",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Professional Developer",
            "gender": "prefer not to disclose",
            "professionalExperience": 6,
            "academicExperience": 4,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "It is very dependent on the situation, and the options above like coding standards and whether the method is part of a public api are more important than things like size, complexity etc.",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "I haven't seen any tools that can generate good quality comments.",
            "situations": "",
            "relativeImportance": [],
            "additionalSourceCodeCharacteristics": [
                "Adherence to Coding Style Standards",
                "Whether the method is part of a public facing API"
            ],
            "extrinsicCharacteristics": []
        },
        "generalThoughts": "Anything non-trivial probably would benefit from a summary comment.",
        "metricEvaluationResponse": {},
        "relevantMetrics": {}
    },
    {
        "_id": {
            "$oid": "602d834731192234ea4706a8"
        },
        "userId": "602d80245724d3d855637c20",
        "conceptEvaluationResponse": {},
        "demographicResponse": {
            "occupation": "Working in Academia",
            "gender": "prefer not to disclose",
            "professionalExperience": 10,
            "academicExperience": 15,
            "programmingExperience": {
                "familiarWithJava": "Yes"
            }
        },
        "exitSurveyResponse": {
            "additionalElaboration": "Surprise: if the method does not do what one may think at first sight.",
            "extrinsicElaboration": "",
            "wouldUse": "No",
            "elaborate": "If the summary can be generated, then it is useless: the comment is useful to a human if it cannot be generated.",
            "situations": "When I want to obfuscate code by adding random crap to it.",
            "relativeImportance": [
                "complexity",
                "naming",
                "maintainability"
            ],
            "additionalSourceCodeCharacteristics": [
                "Error Proneness"
            ],
            "extrinsicCharacteristics": [
                "Team Priorities"
            ]
        },
        "generalThoughts": "When the signature is not explicit enough.",
        "metricEvaluationResponse": {
            "naming": {
                "agreeConceptuallyOnly": true
            },
            "McCC": {
                "agreeConceptuallyOnly": true
            }
        },
        "relevantMetrics": {
            "size": false,
            "complexity": true,
            "maintainability": true,
            "naming": true
        }
    },
{
  "_id": {
    "$oid": "601de7da8c847c0008308d5c"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "female",
    "professionalExperience": 3,
    "academicExperience": 5,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "All public class/method should have a comment. \n\nPrivate class should have a comment.\n\nPrivate method that are a bit more complicated or internally modifies a parameter should have a comment.",
  "metricEvaluationResponse": {
    "NOS": {
      "agreeConceptuallyOnly": false,
      "selectedCategories": [
        "Large",
        "Medium"
      ]
    },
    "McCC": {
      "name": "McCC",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Average",
        "High"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "inline_documentation": {
      "situations": {
        "No inline documentation": true,
        "Poor quality inline documentation": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "size": true,
    "complexity": true,
    "coupling": false,
    "inline_documentation": true,
    "cohesion": false
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "Yes",
    "elaborate": "",
    "situations": "When I try to understand a new code base",
    "relativeImportance": [
      "complexity",
      "size",
      "inline_documentation"
    ],
    "additionalSourceCodeCharacteristics": [
      "Application Domain"
    ],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "601ee55d73e3af000836aa36"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 2,
    "academicExperience": 4,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "I thinking writing a summary comment at the start of a new class or function to give anyone reading the code later or myself a general understanding of what the below code will do. Depending on the functions, I would put inline comments to help remind specific key parts of the code that are either fundamental or needs context. ",
  "metricEvaluationResponse": {
    "McCC": {
      "adjustedThresholds": [
        0,
        9,
        34,
        100
      ],
      "agreeConceptuallyOnly": false,
      "selectedCategories": [
        "Low",
        "Average",
        "High"
      ]
    },
    "MIMS": {
      "adjustedThresholds": [
        0,
        15,
        40,
        100
      ],
      "selectedCategories": [
        "Low",
        "Average",
        "High"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "coupling": {
      "situations": {
        "High coupling": true
      },
      "additionalFeedback": ""
    },
    "cohesion": {
      "situations": {
        "Low cohesion": true
      },
      "additionalFeedback": ""
    },
    "inline_documentation": {
      "situations": {
        "Poor quality inline documentation": true,
        "No inline documentation": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "coupling": true,
    "maintainability": true,
    "inline_documentation": true,
    "complexity": true,
    "cohesion": true,
    "size": false
  },
  "exitSurveyResponse": {
    "additionalElaboration": "I believe considering the field that the code is being made for would impact how much commenting and documentation would be available. Having software for keeping a plant database compared to management of a piece of hardware on a Rocket will have very different importance on how much commenting and documentation. ",
    "extrinsicElaboration": "Customer change orders and having developers put on and off of a project during its development.",
    "wouldUse": "Yes",
    "elaborate": "Even having some generated summaries that would help provide a refresher on code that needs to be modified would be extremely helpful in maintenence. ",
    "situations": "All situations. Especially in a professional enviorment when I am on a deadline or need to move on to another section of the project. ",
    "relativeImportance": [
      "coupling",
      "maintainability",
      "complexity",
      "cohesion",
      "inline_documentation"
    ],
    "additionalSourceCodeCharacteristics": [
      "Application Domain",
      "Adherence to Coding Style Standards"
    ],
    "extrinsicCharacteristics": [
      "Project Deadlines",
      "Team Priorities"
    ]
  }
},{
  "_id": {
    "$oid": "601f388c9d5eea0008b13693"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 3,
    "academicExperience": 4,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "Here are some scenarios where I believe some supplemental explanation is required:\n- The method is public and might hide many levels of abstraction from the consumer of the method\n- The method was implemented for demonstrational purposes and the audience is assumed to not be familiar with key concepts\n- The method is a utility function but it is unclear how, when, or why it should be utilized\n- The method is there for historic reasons and is maybe counter-intuitive (maybe it \"reinvents the wheel\" or \"some super popular library already does this for us so why are we using/maintaining this!\")\n- The method implements a mathematical formula or lesser known algorithm (I like to provide wikipedia links sometimes)\n- The method is a more expensive operation than it appears to be (maybe some toString() method over a recursive data structure for example that one might be tempted to call over and over again)\n- The method changes the state of the application or modifies a parameter in some way (flips a flag in some parameter for example that could have some consequence to application behavior)",
  "metricEvaluationResponse": {
    "McCC": {
      "adjustedThresholds": [
        0,
        2,
        11,
        100
      ],
      "selectedCategories": [],
      "agreeConceptuallyOnly": true
    }
  },
  "conceptEvaluationResponse": {
    "inline_documentation": {
      "situations": {
        "No inline documentation": true,
        "Poor quality inline documentation": true,
        "High quality inline documentation": true
      },
      "additionalFeedback": "I believe that method summaries should be treated independently of inline documentation. Method summaries will focus more on how one might utilize the method (inputs, outputs, where it fits into the system) while inline documentation is targeted towards those who are trying to modify a method in some capacity. Summary is for the consumer of the method, inline is for modification. A summary can be useful for someone modifying the code, but the inline comments may not be important to the consumer of the code."
    },
    "coupling": {
      "situations": {
        "High coupling": true
      },
      "additionalFeedback": ""
    },
    "cohesion": {
      "situations": {
        "Low cohesion": true
      },
      "additionalFeedback": "Low cohesion may result in unintended results and so some warnings are warrented"
    }
  },
  "relevantMetrics": {
    "complexity": true,
    "inline_documentation": true,
    "coupling": true,
    "cohesion": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "Maybe an algorithm does not give the theoretical optimal solution but instead gives something that is \"good enough\" (like some greedy shortest path algorithms). It may be good to document what \"good enough\" means/",
    "extrinsicElaboration": "",
    "wouldUse": "Yes",
    "elaborate": "",
    "situations": "Public methods",
    "relativeImportance": [
      "cohesion",
      "coupling",
      "complexity",
      "inline_documentation"
    ],
    "additionalSourceCodeCharacteristics": [
      "Error Proneness"
    ],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "601f3f199a20fe0008724c76"
  },
  "demographicResponse": {
    "occupation": "Graduate Student",
    "gender": "male",
    "professionalExperience": 0,
    "academicExperience": 3,
    "programmingExperience": {
      "primaryLanguage": "Python",
      "familiarWithJava": "No"
    }
  },
  "generalThoughts": "Because my codebase often is integral to my scientific data analysis and research I generally write comments for any function that I write myself. The only case where I will forego commenting is when the function/method is only a few lines and the purpose is obvious based on the name or code.",
  "metricEvaluationResponse": {
    "NOS": {
      "adjustedThresholds": [
        0,
        9,
        15,
        100
      ],
      "selectedCategories": [
        "Large",
        "Medium"
      ],
      "agreeConceptuallyOnly": false
    },
    "McCC": {
      "name": "McCC",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "High",
        "Average"
      ]
    },
    "naming": {
      "name": "naming",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Several",
        "Few"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "inline_documentation": {
      "situations": {
        "High quality inline documentation": true,
        "Poor quality inline documentation": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "size": true,
    "complexity": true,
    "inline_documentation": true,
    "naming": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "Yes",
    "elaborate": "",
    "situations": "",
    "relativeImportance": [
      "complexity",
      "size",
      "inline_documentation",
      "naming"
    ],
    "additionalSourceCodeCharacteristics": [
      "Whether the method is part of a public facing API",
      "Application Domain"
    ],
    "extrinsicCharacteristics": [
      "Project Deadlines"
    ]
  }
},{
  "_id": {
    "$oid": "601f49a34945f700086ba8cb"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 5,
    "academicExperience": 5,
    "programmingExperience": {}
  },
  "generalThoughts": "In complexe code, not obvious operations and not properly name methods",
  "metricEvaluationResponse": {
    "McCC": {
      "adjustedThresholds": [
        0,
        2,
        8,
        100
      ],
      "selectedCategories": [
        "Average"
      ]
    },
    "naming": {
      "name": "naming",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Very Few"
      ]
    }
  },
  "conceptEvaluationResponse": {},
  "relevantMetrics": {
    "complexity": true,
    "naming": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "In my opinion, a tool can not express my \"state of mind\" and the idea of what the code is supposed to work",
    "situations": "Basic mathods doing obvious operation like: logging, initializing, math/string operation, getter-setter",
    "relativeImportance": [
      "naming",
      "complexity"
    ],
    "additionalSourceCodeCharacteristics": [
      "Code Quality",
      "Whether the method is part of a public facing API"
    ],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "601f507b14289000097d2d2b"
  },
  "demographicResponse": {
    "occupation": "Graduate Student",
    "gender": "male",
    "professionalExperience": 0,
    "academicExperience": 6,
    "programmingExperience": {
      "primaryLanguage": "Python",
      "familiarWithJava": "No"
    }
  },
  "generalThoughts": "I write summary content when the lines are not obvious to understand their functionality by another coder.",
  "metricEvaluationResponse": {
    "NOS": {
      "adjustedThresholds": [
        0,
        3,
        10,
        100
      ],
      "selectedCategories": [
        "Medium",
        "Large"
      ],
      "agreeConceptuallyOnly": false
    },
    "MIMS": {
      "name": "MIMS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Average",
        "Low",
        "High"
      ]
    },
    "naming": {
      "name": "naming",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Very Few",
        "Few",
        "Several",
        "None"
      ]
    },
    "McCC": {
      "name": "McCC",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Average",
        "High",
        "Low"
      ]
    }
  },
  "conceptEvaluationResponse": {},
  "relevantMetrics": {
    "size": true,
    "complexity": true,
    "naming": true,
    "maintainability": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "It depends on the quality of the comments.",
    "situations": "If the comments are really needed to understand the code and such comments can reliably be generated automatically.",
    "relativeImportance": [
      "complexity",
      "maintainability",
      "naming",
      "size"
    ],
    "additionalSourceCodeCharacteristics": [
      "Adherence to Coding Style Standards"
    ],
    "extrinsicCharacteristics": [
      "Project Deadlines"
    ]
  }
},{
  "_id": {
    "$oid": "601f5307449924000841d3ad"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 8,
    "academicExperience": 2,
    "programmingExperience": {
      "primaryLanguage": "",
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "I will always put a summary comment for public API methods with details on the expected input/output. For internal functions, I will only put a summary comment if the name of the method/variable is not clear enough. I usually prefer to spend more time on having clearer function/variable names then on summary comment.",
  "metricEvaluationResponse": {
    "naming": {
      "adjustedThresholds": [
        1,
        3,
        9,
        20
      ],
      "agreeConceptuallyOnly": true
    }
  },
  "conceptEvaluationResponse": {},
  "relevantMetrics": {
    "naming": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "I doubt a tool can describe as well the intent as I do.",
    "situations": "If it was really reliable, I might change my mind and use such a tool. Also, I would consider regenerating the summary as a pre-commit step (git pre-commit hook) as it might help detect potential error if suddenly the description is not good anymore.",
    "relativeImportance": [
      "naming"
    ],
    "additionalSourceCodeCharacteristics": [
      "Whether the method is part of a public facing API",
      "Code Quality"
    ],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "601f601a27d9740008bcbc99"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 2,
    "academicExperience": 4,
    "programmingExperience": {
      "primaryLanguage": "C",
      "familiarWithJava": "No"
    }
  },
  "generalThoughts": "I try to leave summary comments on blocks of code that I as the developer of the code need to understand why the code was implemented in a certain way and how it works. Another key indicator for me to leave a summary is when there are any assumptions built into an algorithm",
  "metricEvaluationResponse": {
    "MIMS": {
      "adjustedThresholds": [
        0,
        20,
        40,
        100
      ],
      "selectedCategories": [
        "Average"
      ]
    },
    "McCC": {
      "name": "McCC",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "High"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "coupling": {
      "situations": {
        "High coupling": false
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "complexity": true,
    "maintainability": true,
    "coupling": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "I think a tool may be helpful to provide some insight on some of the complexities and interdependencies of methods. But at the end of the day there would need to be significant time spent auditing the generated summaries to ensure they properly summarize the code",
    "situations": "I’m not sure this would save much time due to the need to audit the summary. There are lots of tools (ie. Jdocs) that provide decent documentation for method parameters and returns and I think those are sufficient",
    "relativeImportance": [
      "complexity",
      "maintainability",
      "coupling"
    ],
    "additionalSourceCodeCharacteristics": [],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "601fd224680f780008ef3cec"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 12,
    "academicExperience": 5,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": " - We always insists summary comment for all public interface methods\n - Ay method which implements complex behaviour  (no obvious from method name)\n - If there are any side effects for the method\n - If we want convey any message to the code reader",
  "metricEvaluationResponse": {
    "NOS": {
      "adjustedThresholds": [
        0,
        4,
        10,
        100
      ],
      "selectedCategories": [
        "Large"
      ]
    },
    "McCC": {
      "name": "McCC",
      "agreeConceptuallyOnly": true,
      "additionalFeedback": "",
      "selectedCategories": [
        "Average"
      ]
    },
    "MIMS": {
      "name": "MIMS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Average"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "cohesion": {
      "situations": {
        "High cohesion": true
      },
      "additionalFeedback": ""
    },
    "coupling": {
      "situations": {
        "High coupling": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "size": true,
    "complexity": true,
    "maintainability": true,
    "coupling": true,
    "naming": false,
    "cohesion": true,
    "inline_documentation": false
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "",
    "situations": "",
    "relativeImportance": [
      "complexity",
      "maintainability",
      "coupling",
      "cohesion",
      "size"
    ],
    "additionalSourceCodeCharacteristics": [],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "60205be3979f8600089d74e5"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 20,
    "academicExperience": 5,
    "programmingExperience": {
      "primaryLanguage": "C#",
      "familiarWithJava": "No"
    }
  },
  "generalThoughts": "- when the method has side effects not obvious from its name\n- when the return value signification or range is not obvious\n- to specify supported usage and preconditions when, due to language limitations, it is not possible to scope the use of the method properly",
  "metricEvaluationResponse": {
    "MIMS": {
      "name": "MIMS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Average"
      ]
    },
    "naming": {
      "name": "naming",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Few"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "coupling": {
      "situations": {
        "High coupling": true
      },
      "additionalFeedback": ""
    },
    "cohesion": {
      "situations": {
        "Low cohesion": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "size": false,
    "naming": true,
    "coupling": true,
    "maintainability": true,
    "cohesion": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "",
    "situations": "When providing an API for external users",
    "relativeImportance": [
      "coupling",
      "cohesion",
      "naming",
      "maintainability"
    ],
    "additionalSourceCodeCharacteristics": [],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "60207a230e1dde00087e24cd"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 6,
    "academicExperience": 0,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "When there is a behavior or a side effect in the method that is not obvious from its name.",
  "metricEvaluationResponse": {
    "naming": {
      "adjustedThresholds": [
        1,
        3,
        10,
        20
      ],
      "agreeConceptuallyOnly": true,
      "selectedCategories": [
        "None"
      ]
    },
    "McCC": {
      "adjustedThresholds": [
        0,
        2,
        7,
        100
      ]
    }
  },
  "conceptEvaluationResponse": {
    "cohesion": {
      "situations": {
        "Low cohesion": true
      },
      "additionalFeedback": ""
    },
    "coupling": {
      "situations": {
        "High coupling": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "complexity": false,
    "naming": true,
    "coupling": true,
    "cohesion": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "For me documentation of a method is a failure because it means its name, parameters and return type are not enough to understand what it does and safety of its usage is not guaranteed through the type system. I would mostly revert to manual documentation when the method is hard to use because of particularities or when its signature cannot be changed because it is public.",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "Automatic summaries usually cannot tell anything interesting that's not obvious in the method's signature.",
    "situations": "None",
    "relativeImportance": [
      "naming",
      "coupling",
      "cohesion"
    ],
    "additionalSourceCodeCharacteristics": [
      "Whether the method is part of a public facing API",
      "Error Proneness"
    ],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "602096cad4099c0008eceb91"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 4,
    "academicExperience": 5,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "If the method being described is not *painfully* obvious like the given `add` example, I believe that adding a summary outweighs the \"burden\" of maintaining it. It's never fun to drop into a project with poorly commented APIs, especially if its not a codebase that you will stick with for enough time to deeply understand.\n\nThis is obviously considering a codebase that more than one person is writing. However, personally, I've made the mistake of not summarizing the methods of a codebase that only I worked on, and had to spend quite some time understanding it again six months later.",
  "metricEvaluationResponse": {
    "McCC": {
      "adjustedThresholds": [
        0,
        2,
        6,
        100
      ],
      "selectedCategories": [
        "Average",
        "High"
      ]
    },
    "MIMS": {
      "name": "MIMS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Low",
        "Average",
        "High"
      ]
    },
    "naming": {
      "adjustedThresholds": [
        1,
        3,
        8,
        20
      ],
      "selectedCategories": [
        "None",
        "Very Few",
        "Few",
        "Several"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "cohesion": {
      "situations": {
        "Low cohesion": true,
        "High cohesion": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "size": false,
    "complexity": true,
    "maintainability": true,
    "naming": true,
    "coupling": true,
    "cohesion": false
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "Yes",
    "elaborate": "I would be willing to try it.",
    "situations": "It could be useful for certain repetitive tasks.",
    "relativeImportance": [
      "maintainability",
      "complexity",
      "coupling",
      "naming"
    ],
    "additionalSourceCodeCharacteristics": [
      "Whether the method is part of a public facing API"
    ],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "6020a873bc28fa0008ed1c16"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 1,
    "academicExperience": 5,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "If the function has many preconditions or the code base is sufficiently large to make the method complicated. For example, in the add method to the right, I would never expect to see a comment for that as someone can deduce that from the method. But I have encountered at times where methods have several functions (poor-practice) and in that case seeing a summary is nice.  ",
  "metricEvaluationResponse": {
    "McCC": {
      "name": "McCC",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "High",
        "Average"
      ],
      "adjustedThresholds": [
        0,
        2,
        15,
        100
      ]
    },
    "NOS": {
      "name": "NOS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Large",
        "Medium"
      ]
    },
    "naming": {
      "name": "naming",
      "agreeConceptuallyOnly": true,
      "additionalFeedback": "",
      "selectedCategories": [
        "Few",
        "Several"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "coupling": {
      "situations": {
        "High coupling": true
      },
      "additionalFeedback": "If you have high coupling, there definitely should be detailed comments indicating other methods, return values, etc, and definitely checks performed locally."
    },
    "cohesion": {
      "situations": {
        "High cohesion": false,
        "Low cohesion": true
      },
      "additionalFeedback": "First, if a method isn't really cohesive, that method should be split up, but if a method is required to have low cohesiveness, then comments should indicate why along with the full func."
    }
  },
  "relevantMetrics": {
    "size": true,
    "complexity": true,
    "naming": true,
    "coupling": true,
    "cohesion": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "This isn't specific to java, but if there are unsafe methods being leveraged, such as strcpy, memcpy, etc in C, then those should be indicated as to why those are being used over more safe alternatives. This helps when using static analyzers with the code base in the build pipeline.",
    "extrinsicElaboration": "",
    "wouldUse": "Yes",
    "elaborate": "If the summaries were detailed enough or able to be fine tuned.",
    "situations": "Static analysis, flagging methods as not security related, makes life a lot easier when familiarizing yourself with a large code base. Also, if there are certain preconditions needed, for example, this value must not be NULL, then that would be benficial.",
    "relativeImportance": [
      "naming",
      "complexity",
      "cohesion",
      "coupling",
      "size"
    ],
    "additionalSourceCodeCharacteristics": [
      "Code Quality",
      "Error Proneness"
    ],
    "extrinsicCharacteristics": [
      "Team Priorities"
    ]
  }
},{
  "_id": {
    "$oid": "6020fc3fc00ab000080b87d1"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 22,
    "academicExperience": 19,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "In codebases where summary comments are consistently applied and/or reference documentation is autogenerated, I tend to include summary comments.\n\nIn other codebases, I tend to use summary comments for methods where the name and arguments do not capture all of the method's workings and/or when there are side effects that might be surprising to a caller.",
  "metricEvaluationResponse": {
    "naming": {
      "agreeConceptuallyOnly": true,
      "selectedCategories": []
    },
    "NOS": {
      "name": "NOS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Medium"
      ]
    }
  },
  "conceptEvaluationResponse": {},
  "relevantMetrics": {
    "size": true,
    "complexity": true,
    "naming": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "Wrt quality of identifiers, the current metric seems to focus on whether identifiers adhere to the naming style, which is not so important by itself. By quality of identifiers, I mean how well an identifier of a method (and maybe also parameters) captures the essence of what the method does, i.e. how easy is it to deduce what happens base on reading just a method call, or seeing just the method header?",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "Autogenerating summaries and storing them in comments seems pointless, except maybe as a base to start writing your own comments.",
    "situations": "Autogenerating summaries in the sense of method name and parameters while generating reference documentation (i.e. when running doxygen) is sensible, complemented by manually written comments (if any).",
    "relativeImportance": [
      "naming",
      "complexity",
      "size"
    ],
    "additionalSourceCodeCharacteristics": [
      "Whether the method is part of a public facing API",
      "Unexpected side effects"
    ],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "60212f156654df0008021e26"
  },
  "demographicResponse": {
    "occupation": "Professional Developer",
    "gender": "male",
    "professionalExperience": 5,
    "academicExperience": 2,
    "programmingExperience": {
      "familiarWithJava": "Yes"
    }
  },
  "generalThoughts": "When the method name is incapable to show what the method achieves.",
  "metricEvaluationResponse": {
    "McCC": {
      "name": "McCC",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Low"
      ]
    },
    "MIMS": {
      "name": "MIMS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Low"
      ]
    },
    "NOS": {
      "agreeConceptuallyOnly": false,
      "selectedCategories": [
        "Small"
      ]
    },
    "naming": {
      "name": "naming",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Very Few"
      ]
    }
  },
  "conceptEvaluationResponse": {},
  "relevantMetrics": {
    "size": true,
    "complexity": true,
    "maintainability": true,
    "naming": true
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "",
    "elaborate": "",
    "situations": "",
    "relativeImportance": [
      "complexity",
      "maintainability",
      "size",
      "naming"
    ],
    "additionalSourceCodeCharacteristics": [],
    "extrinsicCharacteristics": []
  }
},{
  "_id": {
    "$oid": "60214acee85ad10008dba54a"
  },
  "demographicResponse": {
    "occupation": "",
    "gender": "male",
    "professionalExperience": 17,
    "academicExperience": 0,
    "programmingExperience": {
      "primaryLanguage": "C++",
      "familiarWithJava": "No"
    }
  },
  "generalThoughts": "Putting summary comment criterion:\n - user facing code (part of the public API)\n - add value to the naming and signature of the function (contrarily to your example where `int add(int, int)` adds two integers, though one could argue it's cleaner to have a description in the documentation and it is unlikely the behavior and so the documentation would need to be changed in this example)\n - need to add important information (e.g. `getValue()` actually **compute** a value or have a side-effect, but the function already existed and could not be changed since it would break the API. Or in your example, it can throw a specific exception)",
  "metricEvaluationResponse": {
    "MIMS": {
      "name": "MIMS",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Low",
        "Average"
      ]
    },
    "naming": {
      "name": "naming",
      "agreeConceptuallyOnly": false,
      "additionalFeedback": "",
      "selectedCategories": [
        "Few",
        "Several"
      ]
    },
    "McCC": {
      "adjustedThresholds": [
        0,
        2,
        10,
        100
      ],
      "selectedCategories": [
        "High",
        "Average"
      ]
    }
  },
  "conceptEvaluationResponse": {
    "coupling": {
      "situations": {
        "High coupling": true,
        "Low coupling": false
      },
      "additionalFeedback": ""
    },
    "inline_documentation": {
      "situations": {
        "No inline documentation": true,
        "Poor quality inline documentation": true
      },
      "additionalFeedback": ""
    }
  },
  "relevantMetrics": {
    "complexity": true,
    "naming": true,
    "coupling": true,
    "maintainability": false,
    "inline_documentation": true,
    "cohesion": false
  },
  "exitSurveyResponse": {
    "additionalElaboration": "",
    "extrinsicElaboration": "",
    "wouldUse": "No",
    "elaborate": "",
    "situations": "",
    "relativeImportance": [
      "naming",
      "complexity",
      "inline_documentation",
      "coupling"
    ],
    "additionalSourceCodeCharacteristics": [
      "Error Proneness",
      "Whether the method is part of a public facing API",
      "Application Domain"
    ],
    "extrinsicCharacteristics": []
  }
}]

